using System.Runtime.CompilerServices;
using IKVM.Attributes;
using java.lang;
using org.jcodec.common.io;

namespace org.jcodec.codecs.mpa;

internal class MpaConst : Object
{
	internal class Sftable : Object
	{
		internal int[] l;

		internal int[] s;

		[MethodImpl(MethodImplOptions.NoInlining)]
		[LineNumberTable(new byte[] { 159, 109, 162, 105, 104, 104 })]
		internal Sftable(int[] thel, int[] thes)
		{
			l = thel;
			s = thes;
		}
	}

	internal const int MPEG2_LSF = 0;

	internal const int MPEG1 = 1;

	internal const int MPEG25_LSF = 2;

	internal const int STEREO = 0;

	internal const int JOINT_STEREO = 1;

	internal const int DUAL_CHANNEL = 2;

	internal const int SINGLE_CHANNEL = 3;

	internal const int SAMPLE_FREQ_48K = 1;

	internal const int SAMPLE_FREQ_32K = 2;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static int[][] frequencies;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static int[][][] bitrates;

	internal static int[][] sfbLong;

	internal static int[][] sfbShort;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static int[][] scaleFactorLen;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static int[] pretab;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[] quantizerTab;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[] power43Tab;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[][] intensityOffset;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[] TAN12;

	internal static int[] ll0;

	internal static int[] ss0;

	internal static Sftable sftable;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[] cs;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[] ca;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[][] win;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static int[][][] numberOfScaleFactors;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[] dp;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[] grouping5Bits;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[] grouping7Bits;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[] grouping10Bits;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static int[] tableAb1CodeLength;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[][] tableAb1Groupingtables;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[] tableAb1Factor;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[] tableAb1C;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[] tableAb1D;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[][] tableAb234Groupingtables;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static int[] tableAb2CodeLength;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[] tableAb2Factor;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[] table_ab2_c;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[] table_ab2_d;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static int[] tableAb3CodeLength;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[] tableAb3Factor;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[] tableAb3C;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[] tableAb3D;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static int[] tableAb4CodeLength;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[] tableAb4Factor;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[] tableAb4C;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[] tableAb4D;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static int[] tableCdCodelength;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[][] tableCdGroupingtables;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[] tableCdFactor;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[] tableCdC;

	[Modifiers(Modifiers.Static | Modifiers.Final)]
	internal static float[] tableCdD;

	internal static VLC tab1;

	internal static VLC tab2;

	internal static VLC tab3;

	internal static VLC tab5;

	internal static VLC tab6;

	internal static VLC tab7;

	internal static VLC tab8;

	internal static VLC tab9;

	internal static VLC tab10;

	internal static VLC tab11;

	internal static VLC tab12;

	internal static VLC tab13;

	internal static VLC tab15;

	internal static VLC tab16;

	internal static VLC tab24;

	internal static VLC[] bigValVlc;

	internal static int[] bigValMaxval;

	internal static int[] bigValEscBits;

	internal static VLC cnt1A;

	internal static VLC cnt1B;

	[MethodImpl(MethodImplOptions.NoInlining)]
	[SpecialName]
	public static void ___003Cclinit_003E()
	{
	}

	[MethodImpl(MethodImplOptions.NoInlining)]
	[LineNumberTable(new byte[] { 159, 118, 162, 108, 139, 107, 53, 167 })]
	private static float[] create_t_43()
	{
		float[] t43 = new float[8192];
		double d43 = 1.3333333333333333;
		for (int i = 0; i < 8192; i++)
		{
			t43[i] = (float)Math.pow(i, 1.3333333333333333);
		}
		return t43;
	}

	[MethodImpl(MethodImplOptions.NoInlining)]
	[LineNumberTable(14)]
	internal MpaConst()
	{
	}

	[LineNumberTable(new byte[]
	{
		159,
		136,
		130,
		byte.MaxValue,
		92,
		70,
		byte.MaxValue,
		164,
		153,
		78,
		byte.MaxValue,
		165,
		133,
		84,
		byte.MaxValue,
		162,
		223,
		76,
		191,
		160,
		79,
		159,
		83,
		byte.MaxValue,
		161,
		229,
		89,
		139,
		byte.MaxValue,
		161,
		239,
		80,
		191,
		117,
		127,
		4,
		249,
		74,
		149,
		191,
		45,
		191,
		45,
		byte.MaxValue,
		164,
		193,
		101,
		byte.MaxValue,
		161,
		198,
		73,
		byte.MaxValue,
		182,
		40,
		160,
		67,
		byte.MaxValue,
		162,
		126,
		74,
		byte.MaxValue,
		175,
		188,
		89,
		byte.MaxValue,
		208,
		100,
		172,
		161,
		13,
		191,
		61,
		223,
		57,
		byte.MaxValue,
		117,
		69,
		byte.MaxValue,
		117,
		69,
		byte.MaxValue,
		117,
		69,
		191,
		65,
		127,
		60,
		191,
		117,
		191,
		117,
		223,
		117,
		127,
		15,
		159,
		45,
		159,
		45,
		191,
		45,
		125,
		127,
		13,
		127,
		13,
		159,
		13,
		127,
		61,
		159,
		65,
		191,
		117,
		191,
		117,
		223,
		117,
		127,
		38,
		144,
		127,
		110,
		107,
		127,
		110,
		139,
		159,
		160,
		157,
		107,
		159,
		160,
		157,
		107,
		byte.MaxValue,
		161,
		246,
		71,
		107,
		byte.MaxValue,
		161,
		245,
		71,
		107,
		byte.MaxValue,
		161,
		232,
		71,
		107,
		127,
		163,
		232,
		230,
		74,
		107,
		byte.MaxValue,
		163,
		223,
		74,
		107,
		byte.MaxValue,
		163,
		214,
		73,
		107,
		byte.MaxValue,
		183,
		121,
		96,
		139,
		byte.MaxValue,
		183,
		97,
		98,
		139,
		byte.MaxValue,
		185,
		72,
		99,
		139,
		byte.MaxValue,
		185,
		123,
		98,
		139,
		191,
		160,
		185,
		159,
		160,
		87,
		159,
		160,
		74,
		159,
		160,
		152,
		107,
		159,
		160,
		159,
		11
	})]
	static MpaConst()
	{
		frequencies = new int[3][]
		{
			new int[4] { 22050, 24000, 16000, 1 },
			new int[4] { 44100, 48000, 32000, 1 },
			new int[4] { 11025, 12000, 8000, 1 }
		};
		bitrates = new int[3][][]
		{
			new int[3][]
			{
				new int[16]
				{
					0, 32000, 48000, 56000, 64000, 80000, 96000, 112000, 128000, 144000,
					160000, 176000, 192000, 224000, 256000, 0
				},
				new int[16]
				{
					0, 8000, 16000, 24000, 32000, 40000, 48000, 56000, 64000, 80000,
					96000, 112000, 128000, 144000, 160000, 0
				},
				new int[16]
				{
					0, 8000, 16000, 24000, 32000, 40000, 48000, 56000, 64000, 80000,
					96000, 112000, 128000, 144000, 160000, 0
				}
			},
			new int[3][]
			{
				new int[16]
				{
					0, 32000, 64000, 96000, 128000, 160000, 192000, 224000, 256000, 288000,
					320000, 352000, 384000, 416000, 448000, 0
				},
				new int[16]
				{
					0, 32000, 48000, 56000, 64000, 80000, 96000, 112000, 128000, 160000,
					192000, 224000, 256000, 320000, 384000, 0
				},
				new int[16]
				{
					0, 32000, 40000, 48000, 56000, 64000, 80000, 96000, 112000, 128000,
					160000, 192000, 224000, 256000, 320000, 0
				}
			},
			new int[3][]
			{
				new int[16]
				{
					0, 32000, 48000, 56000, 64000, 80000, 96000, 112000, 128000, 144000,
					160000, 176000, 192000, 224000, 256000, 0
				},
				new int[16]
				{
					0, 8000, 16000, 24000, 32000, 40000, 48000, 56000, 64000, 80000,
					96000, 112000, 128000, 144000, 160000, 0
				},
				new int[16]
				{
					0, 8000, 16000, 24000, 32000, 40000, 48000, 56000, 64000, 80000,
					96000, 112000, 128000, 144000, 160000, 0
				}
			}
		};
		sfbLong = new int[9][]
		{
			new int[23]
			{
				0, 6, 12, 18, 24, 30, 36, 44, 54, 66,
				80, 96, 116, 140, 168, 200, 238, 284, 336, 396,
				464, 522, 576
			},
			new int[23]
			{
				0, 6, 12, 18, 24, 30, 36, 44, 54, 66,
				80, 96, 114, 136, 162, 194, 232, 278, 330, 394,
				464, 540, 576
			},
			new int[23]
			{
				0, 6, 12, 18, 24, 30, 36, 44, 54, 66,
				80, 96, 116, 140, 168, 200, 238, 284, 336, 396,
				464, 522, 576
			},
			new int[23]
			{
				0, 4, 8, 12, 16, 20, 24, 30, 36, 44,
				52, 62, 74, 90, 110, 134, 162, 196, 238, 288,
				342, 418, 576
			},
			new int[23]
			{
				0, 4, 8, 12, 16, 20, 24, 30, 36, 42,
				50, 60, 72, 88, 106, 128, 156, 190, 230, 276,
				330, 384, 576
			},
			new int[23]
			{
				0, 4, 8, 12, 16, 20, 24, 30, 36, 44,
				54, 66, 82, 102, 126, 156, 194, 240, 296, 364,
				448, 550, 576
			},
			new int[23]
			{
				0, 6, 12, 18, 24, 30, 36, 44, 54, 66,
				80, 96, 116, 140, 168, 200, 238, 284, 336, 396,
				464, 522, 576
			},
			new int[23]
			{
				0, 6, 12, 18, 24, 30, 36, 44, 54, 66,
				80, 96, 116, 140, 168, 200, 238, 284, 336, 396,
				464, 522, 576
			},
			new int[23]
			{
				0, 12, 24, 36, 48, 60, 72, 88, 108, 132,
				160, 192, 232, 280, 336, 400, 476, 566, 568, 570,
				572, 574, 576
			}
		};
		sfbShort = new int[9][]
		{
			new int[14]
			{
				0, 4, 8, 12, 18, 24, 32, 42, 56, 74,
				100, 132, 174, 192
			},
			new int[14]
			{
				0, 4, 8, 12, 18, 26, 36, 48, 62, 80,
				104, 136, 180, 192
			},
			new int[14]
			{
				0, 4, 8, 12, 18, 26, 36, 48, 62, 80,
				104, 134, 174, 192
			},
			new int[14]
			{
				0, 4, 8, 12, 16, 22, 30, 40, 52, 66,
				84, 106, 136, 192
			},
			new int[14]
			{
				0, 4, 8, 12, 16, 22, 28, 38, 50, 64,
				80, 100, 126, 192
			},
			new int[14]
			{
				0, 4, 8, 12, 16, 22, 30, 42, 58, 78,
				104, 138, 180, 192
			},
			new int[14]
			{
				0, 4, 8, 12, 18, 26, 36, 48, 62, 80,
				104, 134, 174, 192
			},
			new int[14]
			{
				0, 4, 8, 12, 18, 26, 36, 48, 62, 80,
				104, 134, 174, 192
			},
			new int[14]
			{
				0, 8, 16, 24, 36, 52, 72, 96, 124, 160,
				162, 164, 166, 192
			}
		};
		scaleFactorLen = new int[2][]
		{
			new int[16]
			{
				0, 0, 0, 0, 3, 1, 1, 1, 2, 2,
				2, 3, 3, 3, 4, 4
			},
			new int[16]
			{
				0, 1, 2, 3, 0, 1, 2, 3, 1, 2,
				3, 1, 2, 3, 2, 3
			}
		};
		pretab = new int[22]
		{
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 1, 1, 1, 1, 2, 2, 3, 3, 3,
			2, 0
		};
		quantizerTab = new float[64]
		{
			1f,
			0.707106769f,
			0.5f,
			0.353553385f,
			0.25f,
			0.176776692f,
			0.125f,
			0.0883883461f,
			0.0625f,
			0.0441941731f,
			1f / 32f,
			0.0220970865f,
			1f / 64f,
			0.0110485433f,
			1f / 128f,
			0.00552427163f,
			0.00390625f,
			0.00276213582f,
			0.001953125f,
			0.00138106791f,
			0.0009765625f,
			0.000690533954f,
			0.00048828125f,
			0.000345266977f,
			0.000244140625f,
			0.000172633489f,
			0.000122070313f,
			8.63167443E-05f,
			6.10351563E-05f,
			4.31583721E-05f,
			3.05175781E-05f,
			2.15791861E-05f,
			1.52587891E-05f,
			1.0789593E-05f,
			7.62939453E-06f,
			5.39479652E-06f,
			3.81469727E-06f,
			2.69739826E-06f,
			1.90734863E-06f,
			1.34869913E-06f,
			9.536743E-07f,
			6.74349565E-07f,
			4.76837158E-07f,
			3.37174782E-07f,
			2.38418579E-07f,
			1.68587391E-07f,
			1.1920929E-07f,
			8.42936956E-08f,
			5.96046448E-08f,
			4.21468478E-08f,
			2.98023224E-08f,
			2.10734239E-08f,
			1.49011612E-08f,
			1.05367119E-08f,
			7.450581E-09f,
			5.268356E-09f,
			3.7252903E-09f,
			2.634178E-09f,
			1.86264515E-09f,
			1.317089E-09f,
			9.313226E-10f,
			6.585445E-10f,
			4.656613E-10f,
			3.29272248E-10f
		};
		power43Tab = create_t_43();
		intensityOffset = new float[2][]
		{
			new float[32]
			{
				1f,
				0.8408964f,
				0.707106769f,
				0.594603539f,
				0.5f,
				0.4204482f,
				0.353553385f,
				0.297301769f,
				0.25f,
				0.2102241f,
				0.176776692f,
				0.148650885f,
				0.125f,
				0.105112053f,
				0.0883883461f,
				0.07432544f,
				0.0625f,
				0.0525560267f,
				0.0441941731f,
				0.03716272f,
				1f / 32f,
				0.0262780134f,
				0.0220970865f,
				0.01858136f,
				1f / 64f,
				0.0131390067f,
				0.0110485433f,
				0.00929068f,
				1f / 128f,
				0.00656950334f,
				0.00552427163f,
				0.00464534f
			},
			new float[32]
			{
				1f,
				0.707106769f,
				0.5f,
				0.353553385f,
				0.25f,
				0.176776692f,
				0.125f,
				0.0883883461f,
				0.0625f,
				0.0441941731f,
				1f / 32f,
				0.0220970865f,
				1f / 64f,
				0.0110485433f,
				1f / 128f,
				0.00552427163f,
				0.00390625f,
				0.00276213582f,
				0.001953125f,
				0.00138106791f,
				0.0009765625f,
				0.000690533954f,
				0.00048828125f,
				0.000345266977f,
				0.000244140625f,
				0.000172633489f,
				0.000122070313f,
				8.63167443E-05f,
				6.10351563E-05f,
				4.31583721E-05f,
				3.05175781E-05f,
				2.15791861E-05f
			}
		};
		TAN12 = new float[16]
		{
			0f, 0.2679492f, 0.577350259f, 1f, 1.73205078f, 3.732051f, 1E+11f, -3.732051f, -1.73205078f, -1f,
			-0.577350259f, -0.2679492f, 0f, 0.2679492f, 0.577350259f, 1f
		};
		ll0 = new int[5] { 0, 6, 11, 16, 21 };
		ss0 = new int[3] { 0, 6, 12 };
		sftable = new Sftable(ll0, ss0);
		cs = new float[8] { 0.8574929f, 0.881742f, 0.949628651f, 0.9833146f, 0.9955178f, 0.9991606f, 0.9998992f, 0.999993145f };
		ca = new float[8] { -0.51449573f, -0.471731961f, -0.31337744f, -0.1819132f, -0.09457419f, -0.0409655832f, -0.0141985686f, -0.00369997462f };
		win = new float[4][]
		{
			new float[36]
			{
				-0.0161412153f, -0.05360318f, -0.100707136f, -0.16280818f, -0.5f, -0.383887351f, -0.6206114f, -1.16597557f, -3.87207532f, -4.225629f,
				-1.519529f, -0.974164844f, -0.737440765f, -1.20710683f, -0.5163616f, -0.454260528f, -0.407156557f, -0.3696946f, -0.3387627f, -0.312422216f,
				-0.289395869f, -0.268800825f, -0.5f, -0.232514173f, -0.215967149f, -0.200049788f, -0.184494928f, -0.169058457f, -0.153503612f, -0.137586251f,
				-0.121039219f, -0.207106784f, -0.0847525746f, -0.06415752f, -0.0411311723f, -0.0147907054f
			},
			new float[36]
			{
				-0.0161412153f, -0.05360318f, -0.100707136f, -0.16280818f, -0.5f, -0.383887351f, -0.6206114f, -1.16597557f, -3.87207532f, -4.225629f,
				-1.519529f, -0.974164844f, -0.737440765f, -1.20710683f, -0.5163616f, -0.454260528f, -0.407156557f, -0.3696946f, -0.33908543f, -0.3151181f,
				-0.296422273f, -0.28184548f, -0.5411961f, -0.2621323f, -0.25387916f, -0.2329629f, -0.198527291f, -0.152335346f, -0.0964964f, -0.03342383f,
				0f, 0f, 0f, 0f, 0f, 0f
			},
			new float[36]
			{
				-0.0483008f, -0.157156572f, -0.283250451f, -0.429537475f, -1.20710683f, -0.8242648f, -1.14517486f, -1.769529f, -4.54702234f, -3.489053f,
				-0.7329629f, -0.150765151f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f,
				0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f,
				0f, 0f, 0f, 0f, 0f, 0f
			},
			new float[36]
			{
				0f, 0f, 0f, 0f, 0f, 0f, -0.150765136f, -0.7329629f, -3.489053f, -4.54702234f,
				-1.769529f, -1.14517486f, -0.8313774f, -1.306563f, -0.541420162f, -0.465289742f, -0.4106699f, -0.3700468f, -0.3387627f, -0.312422216f,
				-0.289395869f, -0.268800825f, -0.5f, -0.232514173f, -0.215967149f, -0.200049788f, -0.184494928f, -0.169058457f, -0.153503612f, -0.137586251f,
				-0.121039219f, -0.207106784f, -0.0847525746f, -0.06415752f, -0.0411311723f, -0.0147907054f
			}
		};
		numberOfScaleFactors = new int[6][][]
		{
			new int[3][]
			{
				new int[4] { 6, 5, 5, 5 },
				new int[4] { 9, 9, 9, 9 },
				new int[4] { 6, 9, 9, 9 }
			},
			new int[3][]
			{
				new int[4] { 6, 5, 7, 3 },
				new int[4] { 9, 9, 12, 6 },
				new int[4] { 6, 9, 12, 6 }
			},
			new int[3][]
			{
				new int[4] { 11, 10, 0, 0 },
				new int[4] { 18, 18, 0, 0 },
				new int[4] { 15, 18, 0, 0 }
			},
			new int[3][]
			{
				new int[4] { 7, 7, 7, 0 },
				new int[4] { 12, 12, 12, 0 },
				new int[4] { 6, 15, 12, 0 }
			},
			new int[3][]
			{
				new int[4] { 6, 6, 6, 3 },
				new int[4] { 12, 9, 9, 6 },
				new int[4] { 6, 12, 9, 6 }
			},
			new int[3][]
			{
				new int[4] { 8, 8, 5, 0 },
				new int[4] { 15, 12, 9, 0 },
				new int[4] { 6, 18, 9, 0 }
			}
		};
		dp = new float[512]
		{
			0f, -0.000442505f, 0.003250122f, -0.007003784f, 0.0310821533f, -0.07862854f, 0.100311279f, -0.572036743f, 1.144989f, 0.572036743f,
			0.100311279f, 0.07862854f, 0.0310821533f, 0.007003784f, 0.003250122f, 0.000442505f, -1.5259E-05f, -0.000473022f, 0.003326416f, -0.007919312f,
			0.0305175781f, -0.08418274f, 0.090927124f, -0.6002197f, 1.14428711f, 0.543823242f, 0.1088562f, 0.07305908f, 0.03147888f, 0.006118774f,
			0.003173828f, 0.000396729f, -1.5259E-05f, -0.000534058f, 0.003387451f, -0.008865356f, 0.0297851563f, -0.08970642f, 0.08068848f, -0.6282959f,
			1.14221191f, 0.515609741f, 0.116577148f, 0.06752014f, 0.03173828f, 0.0052948f, 0.003082275f, 0.000366211f, -1.5259E-05f, -0.000579834f,
			0.003433228f, -0.009841919f, 0.0288848877f, -0.09516907f, 0.06959534f, -0.6562195f, 1.13876343f, 0.487472534f, 0.123474121f, 0.06199646f,
			0.0318450928f, 0.004486084f, 0.002990723f, 0.000320435f, -1.5259E-05f, -0.00062561f, 0.003463745f, -0.010848999f, 0.0278015137f, -0.100540161f,
			0.0576171875f, -0.6839142f, 1.13392639f, 0.459472656f, 0.129577637f, 0.0565338135f, 0.0318145752f, 0.003723145f, 0.00289917f, 0.000289917f,
			-1.5259E-05f, -0.000686646f, 0.003479004f, -0.0118865967f, 0.0265350342f, -0.1058197f, 0.0447845459f, -0.71131897f, 1.12774658f, 0.431655884f,
			0.1348877f, 0.0511322021f, 0.0316619873f, 0.003005981f, 0.002792358f, 0.000259399f, -1.5259E-05f, -0.000747681f, 0.003479004f, -0.0129394531f,
			0.02508545f, -0.110946655f, 0.0310821533f, -0.7383728f, 1.120224f, 0.404083252f, 0.139450073f, 0.0458374023f, 0.03138733f, 0.002334595f,
			0.002685547f, 0.000244141f, -3.0518E-05f, -0.000808716f, 0.003463745f, -0.0140228271f, 0.0234222412f, -0.115921021f, 0.01651001f, -0.7650299f,
			1.1113739f, 0.376800537f, 0.143264771f, 0.0406341553f, 0.03100586f, 0.001693726f, 0.002578735f, 0.000213623f, -3.0518E-05f, -0.00088501f,
			0.003417969f, -0.01512146f, 0.0215759277f, -0.120697021f, 0.001068115f, -0.791214f, 1.10121155f, 0.349868774f, 0.1463623f, 0.03555298f,
			0.0305328369f, 0.001098633f, 0.002456665f, 0.000198364f, -3.0518E-05f, -0.000961304f, 0.003372192f, -0.0162353516f, 0.01953125f, -0.1252594f,
			-0.0152282706f, -0.816864f, 1.08978271f, 0.323318481f, 0.1487732f, 0.03060913f, 0.0299377441f, 0.000549316f, 0.002349854f, 0.000167847f,
			-3.0518E-05f, -0.001037598f, 0.00328064f, -0.0173492432f, 0.01725769f, -0.129562378f, -0.03237915f, -0.841949463f, 1.07711792f, 0.2972107f,
			0.150497437f, 0.0258178711f, 0.0292816162f, 3.0518E-05f, 0.002243042f, 0.000152588f, -4.5776E-05f, -0.001113892f, 0.003173828f, -0.0184631348f,
			0.0148010254f, -0.1335907f, -0.0503540039f, -0.8663635f, 1.06321716f, 0.2715912f, 0.151596069f, 0.0211792f, 0.0285339355f, -0.000442505f,
			0.002120972f, 0.000137329f, -4.5776E-05f, -0.001205444f, 0.003051758f, -0.0195770264f, 0.0121154794f, -0.137298584f, -0.06916809f, -0.890090942f,
			1.04815674f, 0.246505737f, 0.152069092f, 0.016708374f, 0.02772522f, -0.000869751f, 0.00201416f, 0.00012207f, -6.1035E-05f, -0.001296997f,
			0.002883911f, -0.020690918f, 0.009231567f, -0.140670776f, -0.0887756348f, -0.9130554f, 1.03193665f, 0.221984863f, 0.15196228f, 0.0124206543f,
			0.02684021f, -0.001266479f, 0.001907349f, 0.000106812f, -6.1035E-05f, -0.00138855f, 0.002700806f, -0.02178955f, 0.006134033f, -0.143676758f,
			-0.109161377f, -0.9351959f, 1.01461792f, 0.198059082f, 0.151306152f, 0.00831604f, 0.0259094238f, -0.001617432f, 0.001785278f, 0.000106812f,
			-7.6294E-05f, -0.001480103f, 0.002487183f, -0.022857666f, 0.002822876f, -0.1462555f, -0.130310059f, -0.956481934f, 0.996246338f, 0.174789429f,
			0.150115967f, 0.004394531f, 0.0249328613f, -0.001937866f, 0.001693726f, 9.1553E-05f, -7.6294E-05f, -0.001586914f, 0.002227783f, -0.0239105225f,
			-0.000686646f, -0.148422241f, -0.152206421f, -0.9768524f, 0.9768524f, 0.152206421f, 0.148422241f, 0.000686646f, 0.0239105225f, -0.002227783f,
			0.001586914f, 7.6294E-05f, -9.1553E-05f, -0.001693726f, 0.001937866f, -0.0249328613f, -0.004394531f, -0.150115967f, -0.174789429f, -0.996246338f,
			0.956481934f, 0.130310059f, 0.1462555f, -0.002822876f, 0.022857666f, -0.002487183f, 0.001480103f, 7.6294E-05f, -0.000106812f, -0.001785278f,
			0.001617432f, -0.0259094238f, -0.00831604f, -0.151306152f, -0.198059082f, -1.01461792f, 0.9351959f, 0.109161377f, 0.143676758f, -0.006134033f,
			0.02178955f, -0.002700806f, 0.00138855f, 6.1035E-05f, -0.000106812f, -0.001907349f, 0.001266479f, -0.02684021f, -0.0124206543f, -0.15196228f,
			-0.221984863f, -1.03193665f, 0.9130554f, 0.0887756348f, 0.140670776f, -0.009231567f, 0.020690918f, -0.002883911f, 0.001296997f, 6.1035E-05f,
			-0.00012207f, -0.00201416f, 0.000869751f, -0.02772522f, -0.016708374f, -0.152069092f, -0.246505737f, -1.04815674f, 0.890090942f, 0.06916809f,
			0.137298584f, -0.0121154794f, 0.0195770264f, -0.003051758f, 0.001205444f, 4.5776E-05f, -0.000137329f, -0.002120972f, 0.000442505f, -0.0285339355f,
			-0.0211792f, -0.151596069f, -0.2715912f, -1.06321716f, 0.8663635f, 0.0503540039f, 0.1335907f, -0.0148010254f, 0.0184631348f, -0.003173828f,
			0.001113892f, 4.5776E-05f, -0.000152588f, -0.002243042f, -3.0518E-05f, -0.0292816162f, -0.0258178711f, -0.150497437f, -0.2972107f, -1.07711792f,
			0.841949463f, 0.03237915f, 0.129562378f, -0.01725769f, 0.0173492432f, -0.00328064f, 0.001037598f, 3.0518E-05f, -0.000167847f, -0.002349854f,
			-0.000549316f, -0.0299377441f, -0.03060913f, -0.1487732f, -0.323318481f, -1.08978271f, 0.816864f, 0.0152282706f, 0.1252594f, -0.01953125f,
			0.0162353516f, -0.003372192f, 0.000961304f, 3.0518E-05f, -0.000198364f, -0.002456665f, -0.001098633f, -0.0305328369f, -0.03555298f, -0.1463623f,
			-0.349868774f, -1.10121155f, 0.791214f, -0.001068115f, 0.120697021f, -0.0215759277f, 0.01512146f, -0.003417969f, 0.00088501f, 3.0518E-05f,
			-0.000213623f, -0.002578735f, -0.001693726f, -0.03100586f, -0.0406341553f, -0.143264771f, -0.376800537f, -1.1113739f, 0.7650299f, -0.01651001f,
			0.115921021f, -0.0234222412f, 0.0140228271f, -0.003463745f, 0.000808716f, 3.0518E-05f, -0.000244141f, -0.002685547f, -0.002334595f, -0.03138733f,
			-0.0458374023f, -0.139450073f, -0.404083252f, -1.120224f, 0.7383728f, -0.0310821533f, 0.110946655f, -0.02508545f, 0.0129394531f, -0.003479004f,
			0.000747681f, 1.5259E-05f, -0.000259399f, -0.002792358f, -0.003005981f, -0.0316619873f, -0.0511322021f, -0.1348877f, -0.431655884f, -1.12774658f,
			0.71131897f, -0.0447845459f, 0.1058197f, -0.0265350342f, 0.0118865967f, -0.003479004f, 0.000686646f, 1.5259E-05f, -0.000289917f, -0.00289917f,
			-0.003723145f, -0.0318145752f, -0.0565338135f, -0.129577637f, -0.459472656f, -1.13392639f, 0.6839142f, -0.0576171875f, 0.100540161f, -0.0278015137f,
			0.010848999f, -0.003463745f, 0.00062561f, 1.5259E-05f, -0.000320435f, -0.002990723f, -0.004486084f, -0.0318450928f, -0.06199646f, -0.123474121f,
			-0.487472534f, -1.13876343f, 0.6562195f, -0.06959534f, 0.09516907f, -0.0288848877f, 0.009841919f, -0.003433228f, 0.000579834f, 1.5259E-05f,
			-0.000366211f, -0.003082275f, -0.0052948f, -0.03173828f, -0.06752014f, -0.116577148f, -0.515609741f, -1.14221191f, 0.6282959f, -0.08068848f,
			0.08970642f, -0.0297851563f, 0.008865356f, -0.003387451f, 0.000534058f, 1.5259E-05f, -0.000396729f, -0.003173828f, -0.006118774f, -0.03147888f,
			-0.07305908f, -0.1088562f, -0.543823242f, -1.14428711f, 0.6002197f, -0.090927124f, 0.08418274f, -0.0305175781f, 0.007919312f, -0.003326416f,
			0.000473022f, 1.5259E-05f
		};
		grouping5Bits = new float[81]
		{
			-2f / 3f,
			-2f / 3f,
			-2f / 3f,
			0f,
			-2f / 3f,
			-2f / 3f,
			2f / 3f,
			-2f / 3f,
			-2f / 3f,
			-2f / 3f,
			0f,
			-2f / 3f,
			0f,
			0f,
			-2f / 3f,
			2f / 3f,
			0f,
			-2f / 3f,
			-2f / 3f,
			2f / 3f,
			-2f / 3f,
			0f,
			2f / 3f,
			-2f / 3f,
			2f / 3f,
			2f / 3f,
			-2f / 3f,
			-2f / 3f,
			-2f / 3f,
			0f,
			0f,
			-2f / 3f,
			0f,
			2f / 3f,
			-2f / 3f,
			0f,
			-2f / 3f,
			0f,
			0f,
			0f,
			0f,
			0f,
			2f / 3f,
			0f,
			0f,
			-2f / 3f,
			2f / 3f,
			0f,
			0f,
			2f / 3f,
			0f,
			2f / 3f,
			2f / 3f,
			0f,
			-2f / 3f,
			-2f / 3f,
			2f / 3f,
			0f,
			-2f / 3f,
			2f / 3f,
			2f / 3f,
			-2f / 3f,
			2f / 3f,
			-2f / 3f,
			0f,
			2f / 3f,
			0f,
			0f,
			2f / 3f,
			2f / 3f,
			0f,
			2f / 3f,
			-2f / 3f,
			2f / 3f,
			2f / 3f,
			0f,
			2f / 3f,
			2f / 3f,
			2f / 3f,
			2f / 3f,
			2f / 3f
		};
		grouping7Bits = new float[375]
		{
			-0.8f, -0.8f, -0.8f, -0.4f, -0.8f, -0.8f, 0f, -0.8f, -0.8f, 0.4f,
			-0.8f, -0.8f, 0.8f, -0.8f, -0.8f, -0.8f, -0.4f, -0.8f, -0.4f, -0.4f,
			-0.8f, 0f, -0.4f, -0.8f, 0.4f, -0.4f, -0.8f, 0.8f, -0.4f, -0.8f,
			-0.8f, 0f, -0.8f, -0.4f, 0f, -0.8f, 0f, 0f, -0.8f, 0.4f,
			0f, -0.8f, 0.8f, 0f, -0.8f, -0.8f, 0.4f, -0.8f, -0.4f, 0.4f,
			-0.8f, 0f, 0.4f, -0.8f, 0.4f, 0.4f, -0.8f, 0.8f, 0.4f, -0.8f,
			-0.8f, 0.8f, -0.8f, -0.4f, 0.8f, -0.8f, 0f, 0.8f, -0.8f, 0.4f,
			0.8f, -0.8f, 0.8f, 0.8f, -0.8f, -0.8f, -0.8f, -0.4f, -0.4f, -0.8f,
			-0.4f, 0f, -0.8f, -0.4f, 0.4f, -0.8f, -0.4f, 0.8f, -0.8f, -0.4f,
			-0.8f, -0.4f, -0.4f, -0.4f, -0.4f, -0.4f, 0f, -0.4f, -0.4f, 0.4f,
			-0.4f, -0.4f, 0.8f, -0.4f, -0.4f, -0.8f, 0f, -0.4f, -0.4f, 0f,
			-0.4f, 0f, 0f, -0.4f, 0.4f, 0f, -0.4f, 0.8f, 0f, -0.4f,
			-0.8f, 0.4f, -0.4f, -0.4f, 0.4f, -0.4f, 0f, 0.4f, -0.4f, 0.4f,
			0.4f, -0.4f, 0.8f, 0.4f, -0.4f, -0.8f, 0.8f, -0.4f, -0.4f, 0.8f,
			-0.4f, 0f, 0.8f, -0.4f, 0.4f, 0.8f, -0.4f, 0.8f, 0.8f, -0.4f,
			-0.8f, -0.8f, 0f, -0.4f, -0.8f, 0f, 0f, -0.8f, 0f, 0.4f,
			-0.8f, 0f, 0.8f, -0.8f, 0f, -0.8f, -0.4f, 0f, -0.4f, -0.4f,
			0f, 0f, -0.4f, 0f, 0.4f, -0.4f, 0f, 0.8f, -0.4f, 0f,
			-0.8f, 0f, 0f, -0.4f, 0f, 0f, 0f, 0f, 0f, 0.4f,
			0f, 0f, 0.8f, 0f, 0f, -0.8f, 0.4f, 0f, -0.4f, 0.4f,
			0f, 0f, 0.4f, 0f, 0.4f, 0.4f, 0f, 0.8f, 0.4f, 0f,
			-0.8f, 0.8f, 0f, -0.4f, 0.8f, 0f, 0f, 0.8f, 0f, 0.4f,
			0.8f, 0f, 0.8f, 0.8f, 0f, -0.8f, -0.8f, 0.4f, -0.4f, -0.8f,
			0.4f, 0f, -0.8f, 0.4f, 0.4f, -0.8f, 0.4f, 0.8f, -0.8f, 0.4f,
			-0.8f, -0.4f, 0.4f, -0.4f, -0.4f, 0.4f, 0f, -0.4f, 0.4f, 0.4f,
			-0.4f, 0.4f, 0.8f, -0.4f, 0.4f, -0.8f, 0f, 0.4f, -0.4f, 0f,
			0.4f, 0f, 0f, 0.4f, 0.4f, 0f, 0.4f, 0.8f, 0f, 0.4f,
			-0.8f, 0.4f, 0.4f, -0.4f, 0.4f, 0.4f, 0f, 0.4f, 0.4f, 0.4f,
			0.4f, 0.4f, 0.8f, 0.4f, 0.4f, -0.8f, 0.8f, 0.4f, -0.4f, 0.8f,
			0.4f, 0f, 0.8f, 0.4f, 0.4f, 0.8f, 0.4f, 0.8f, 0.8f, 0.4f,
			-0.8f, -0.8f, 0.8f, -0.4f, -0.8f, 0.8f, 0f, -0.8f, 0.8f, 0.4f,
			-0.8f, 0.8f, 0.8f, -0.8f, 0.8f, -0.8f, -0.4f, 0.8f, -0.4f, -0.4f,
			0.8f, 0f, -0.4f, 0.8f, 0.4f, -0.4f, 0.8f, 0.8f, -0.4f, 0.8f,
			-0.8f, 0f, 0.8f, -0.4f, 0f, 0.8f, 0f, 0f, 0.8f, 0.4f,
			0f, 0.8f, 0.8f, 0f, 0.8f, -0.8f, 0.4f, 0.8f, -0.4f, 0.4f,
			0.8f, 0f, 0.4f, 0.8f, 0.4f, 0.4f, 0.8f, 0.8f, 0.4f, 0.8f,
			-0.8f, 0.8f, 0.8f, -0.4f, 0.8f, 0.8f, 0f, 0.8f, 0.8f, 0.4f,
			0.8f, 0.8f, 0.8f, 0.8f, 0.8f
		};
		grouping10Bits = new float[2187]
		{
			-8f / 9f,
			-8f / 9f,
			-8f / 9f,
			-2f / 3f,
			-8f / 9f,
			-8f / 9f,
			-4f / 9f,
			-8f / 9f,
			-8f / 9f,
			-2f / 9f,
			-8f / 9f,
			-8f / 9f,
			0f,
			-8f / 9f,
			-8f / 9f,
			2f / 9f,
			-8f / 9f,
			-8f / 9f,
			4f / 9f,
			-8f / 9f,
			-8f / 9f,
			2f / 3f,
			-8f / 9f,
			-8f / 9f,
			8f / 9f,
			-8f / 9f,
			-8f / 9f,
			-8f / 9f,
			-2f / 3f,
			-8f / 9f,
			-2f / 3f,
			-2f / 3f,
			-8f / 9f,
			-4f / 9f,
			-2f / 3f,
			-8f / 9f,
			-2f / 9f,
			-2f / 3f,
			-8f / 9f,
			0f,
			-2f / 3f,
			-8f / 9f,
			2f / 9f,
			-2f / 3f,
			-8f / 9f,
			4f / 9f,
			-2f / 3f,
			-8f / 9f,
			2f / 3f,
			-2f / 3f,
			-8f / 9f,
			8f / 9f,
			-2f / 3f,
			-8f / 9f,
			-8f / 9f,
			-4f / 9f,
			-8f / 9f,
			-2f / 3f,
			-4f / 9f,
			-8f / 9f,
			-4f / 9f,
			-4f / 9f,
			-8f / 9f,
			-2f / 9f,
			-4f / 9f,
			-8f / 9f,
			0f,
			-4f / 9f,
			-8f / 9f,
			2f / 9f,
			-4f / 9f,
			-8f / 9f,
			4f / 9f,
			-4f / 9f,
			-8f / 9f,
			2f / 3f,
			-4f / 9f,
			-8f / 9f,
			8f / 9f,
			-4f / 9f,
			-8f / 9f,
			-8f / 9f,
			-2f / 9f,
			-8f / 9f,
			-2f / 3f,
			-2f / 9f,
			-8f / 9f,
			-4f / 9f,
			-2f / 9f,
			-8f / 9f,
			-2f / 9f,
			-2f / 9f,
			-8f / 9f,
			0f,
			-2f / 9f,
			-8f / 9f,
			2f / 9f,
			-2f / 9f,
			-8f / 9f,
			4f / 9f,
			-2f / 9f,
			-8f / 9f,
			2f / 3f,
			-2f / 9f,
			-8f / 9f,
			8f / 9f,
			-2f / 9f,
			-8f / 9f,
			-8f / 9f,
			0f,
			-8f / 9f,
			-2f / 3f,
			0f,
			-8f / 9f,
			-4f / 9f,
			0f,
			-8f / 9f,
			-2f / 9f,
			0f,
			-8f / 9f,
			0f,
			0f,
			-8f / 9f,
			2f / 9f,
			0f,
			-8f / 9f,
			4f / 9f,
			0f,
			-8f / 9f,
			2f / 3f,
			0f,
			-8f / 9f,
			8f / 9f,
			0f,
			-8f / 9f,
			-8f / 9f,
			2f / 9f,
			-8f / 9f,
			-2f / 3f,
			2f / 9f,
			-8f / 9f,
			-4f / 9f,
			2f / 9f,
			-8f / 9f,
			-2f / 9f,
			2f / 9f,
			-8f / 9f,
			0f,
			2f / 9f,
			-8f / 9f,
			2f / 9f,
			2f / 9f,
			-8f / 9f,
			4f / 9f,
			2f / 9f,
			-8f / 9f,
			2f / 3f,
			2f / 9f,
			-8f / 9f,
			8f / 9f,
			2f / 9f,
			-8f / 9f,
			-8f / 9f,
			4f / 9f,
			-8f / 9f,
			-2f / 3f,
			4f / 9f,
			-8f / 9f,
			-4f / 9f,
			4f / 9f,
			-8f / 9f,
			-2f / 9f,
			4f / 9f,
			-8f / 9f,
			0f,
			4f / 9f,
			-8f / 9f,
			2f / 9f,
			4f / 9f,
			-8f / 9f,
			4f / 9f,
			4f / 9f,
			-8f / 9f,
			2f / 3f,
			4f / 9f,
			-8f / 9f,
			8f / 9f,
			4f / 9f,
			-8f / 9f,
			-8f / 9f,
			2f / 3f,
			-8f / 9f,
			-2f / 3f,
			2f / 3f,
			-8f / 9f,
			-4f / 9f,
			2f / 3f,
			-8f / 9f,
			-2f / 9f,
			2f / 3f,
			-8f / 9f,
			0f,
			2f / 3f,
			-8f / 9f,
			2f / 9f,
			2f / 3f,
			-8f / 9f,
			4f / 9f,
			2f / 3f,
			-8f / 9f,
			2f / 3f,
			2f / 3f,
			-8f / 9f,
			8f / 9f,
			2f / 3f,
			-8f / 9f,
			-8f / 9f,
			8f / 9f,
			-8f / 9f,
			-2f / 3f,
			8f / 9f,
			-8f / 9f,
			-4f / 9f,
			8f / 9f,
			-8f / 9f,
			-2f / 9f,
			8f / 9f,
			-8f / 9f,
			0f,
			8f / 9f,
			-8f / 9f,
			2f / 9f,
			8f / 9f,
			-8f / 9f,
			4f / 9f,
			8f / 9f,
			-8f / 9f,
			2f / 3f,
			8f / 9f,
			-8f / 9f,
			8f / 9f,
			8f / 9f,
			-8f / 9f,
			-8f / 9f,
			-8f / 9f,
			-2f / 3f,
			-2f / 3f,
			-8f / 9f,
			-2f / 3f,
			-4f / 9f,
			-8f / 9f,
			-2f / 3f,
			-2f / 9f,
			-8f / 9f,
			-2f / 3f,
			0f,
			-8f / 9f,
			-2f / 3f,
			2f / 9f,
			-8f / 9f,
			-2f / 3f,
			4f / 9f,
			-8f / 9f,
			-2f / 3f,
			2f / 3f,
			-8f / 9f,
			-2f / 3f,
			8f / 9f,
			-8f / 9f,
			-2f / 3f,
			-8f / 9f,
			-2f / 3f,
			-2f / 3f,
			-2f / 3f,
			-2f / 3f,
			-2f / 3f,
			-4f / 9f,
			-2f / 3f,
			-2f / 3f,
			-2f / 9f,
			-2f / 3f,
			-2f / 3f,
			0f,
			-2f / 3f,
			-2f / 3f,
			2f / 9f,
			-2f / 3f,
			-2f / 3f,
			4f / 9f,
			-2f / 3f,
			-2f / 3f,
			2f / 3f,
			-2f / 3f,
			-2f / 3f,
			8f / 9f,
			-2f / 3f,
			-2f / 3f,
			-8f / 9f,
			-4f / 9f,
			-2f / 3f,
			-2f / 3f,
			-4f / 9f,
			-2f / 3f,
			-4f / 9f,
			-4f / 9f,
			-2f / 3f,
			-2f / 9f,
			-4f / 9f,
			-2f / 3f,
			0f,
			-4f / 9f,
			-2f / 3f,
			2f / 9f,
			-4f / 9f,
			-2f / 3f,
			4f / 9f,
			-4f / 9f,
			-2f / 3f,
			2f / 3f,
			-4f / 9f,
			-2f / 3f,
			8f / 9f,
			-4f / 9f,
			-2f / 3f,
			-8f / 9f,
			-2f / 9f,
			-2f / 3f,
			-2f / 3f,
			-2f / 9f,
			-2f / 3f,
			-4f / 9f,
			-2f / 9f,
			-2f / 3f,
			-2f / 9f,
			-2f / 9f,
			-2f / 3f,
			0f,
			-2f / 9f,
			-2f / 3f,
			2f / 9f,
			-2f / 9f,
			-2f / 3f,
			4f / 9f,
			-2f / 9f,
			-2f / 3f,
			2f / 3f,
			-2f / 9f,
			-2f / 3f,
			8f / 9f,
			-2f / 9f,
			-2f / 3f,
			-8f / 9f,
			0f,
			-2f / 3f,
			-2f / 3f,
			0f,
			-2f / 3f,
			-4f / 9f,
			0f,
			-2f / 3f,
			-2f / 9f,
			0f,
			-2f / 3f,
			0f,
			0f,
			-2f / 3f,
			2f / 9f,
			0f,
			-2f / 3f,
			4f / 9f,
			0f,
			-2f / 3f,
			2f / 3f,
			0f,
			-2f / 3f,
			8f / 9f,
			0f,
			-2f / 3f,
			-8f / 9f,
			2f / 9f,
			-2f / 3f,
			-2f / 3f,
			2f / 9f,
			-2f / 3f,
			-4f / 9f,
			2f / 9f,
			-2f / 3f,
			-2f / 9f,
			2f / 9f,
			-2f / 3f,
			0f,
			2f / 9f,
			-2f / 3f,
			2f / 9f,
			2f / 9f,
			-2f / 3f,
			4f / 9f,
			2f / 9f,
			-2f / 3f,
			2f / 3f,
			2f / 9f,
			-2f / 3f,
			8f / 9f,
			2f / 9f,
			-2f / 3f,
			-8f / 9f,
			4f / 9f,
			-2f / 3f,
			-2f / 3f,
			4f / 9f,
			-2f / 3f,
			-4f / 9f,
			4f / 9f,
			-2f / 3f,
			-2f / 9f,
			4f / 9f,
			-2f / 3f,
			0f,
			4f / 9f,
			-2f / 3f,
			2f / 9f,
			4f / 9f,
			-2f / 3f,
			4f / 9f,
			4f / 9f,
			-2f / 3f,
			2f / 3f,
			4f / 9f,
			-2f / 3f,
			8f / 9f,
			4f / 9f,
			-2f / 3f,
			-8f / 9f,
			2f / 3f,
			-2f / 3f,
			-2f / 3f,
			2f / 3f,
			-2f / 3f,
			-4f / 9f,
			2f / 3f,
			-2f / 3f,
			-2f / 9f,
			2f / 3f,
			-2f / 3f,
			0f,
			2f / 3f,
			-2f / 3f,
			2f / 9f,
			2f / 3f,
			-2f / 3f,
			4f / 9f,
			2f / 3f,
			-2f / 3f,
			2f / 3f,
			2f / 3f,
			-2f / 3f,
			8f / 9f,
			2f / 3f,
			-2f / 3f,
			-8f / 9f,
			8f / 9f,
			-2f / 3f,
			-2f / 3f,
			8f / 9f,
			-2f / 3f,
			-4f / 9f,
			8f / 9f,
			-2f / 3f,
			-2f / 9f,
			8f / 9f,
			-2f / 3f,
			0f,
			8f / 9f,
			-2f / 3f,
			2f / 9f,
			8f / 9f,
			-2f / 3f,
			4f / 9f,
			8f / 9f,
			-2f / 3f,
			2f / 3f,
			8f / 9f,
			-2f / 3f,
			8f / 9f,
			8f / 9f,
			-2f / 3f,
			-8f / 9f,
			-8f / 9f,
			-4f / 9f,
			-2f / 3f,
			-8f / 9f,
			-4f / 9f,
			-4f / 9f,
			-8f / 9f,
			-4f / 9f,
			-2f / 9f,
			-8f / 9f,
			-4f / 9f,
			0f,
			-8f / 9f,
			-4f / 9f,
			2f / 9f,
			-8f / 9f,
			-4f / 9f,
			4f / 9f,
			-8f / 9f,
			-4f / 9f,
			2f / 3f,
			-8f / 9f,
			-4f / 9f,
			8f / 9f,
			-8f / 9f,
			-4f / 9f,
			-8f / 9f,
			-2f / 3f,
			-4f / 9f,
			-2f / 3f,
			-2f / 3f,
			-4f / 9f,
			-4f / 9f,
			-2f / 3f,
			-4f / 9f,
			-2f / 9f,
			-2f / 3f,
			-4f / 9f,
			0f,
			-2f / 3f,
			-4f / 9f,
			2f / 9f,
			-2f / 3f,
			-4f / 9f,
			4f / 9f,
			-2f / 3f,
			-4f / 9f,
			2f / 3f,
			-2f / 3f,
			-4f / 9f,
			8f / 9f,
			-2f / 3f,
			-4f / 9f,
			-8f / 9f,
			-4f / 9f,
			-4f / 9f,
			-2f / 3f,
			-4f / 9f,
			-4f / 9f,
			-4f / 9f,
			-4f / 9f,
			-4f / 9f,
			-2f / 9f,
			-4f / 9f,
			-4f / 9f,
			0f,
			-4f / 9f,
			-4f / 9f,
			2f / 9f,
			-4f / 9f,
			-4f / 9f,
			4f / 9f,
			-4f / 9f,
			-4f / 9f,
			2f / 3f,
			-4f / 9f,
			-4f / 9f,
			8f / 9f,
			-4f / 9f,
			-4f / 9f,
			-8f / 9f,
			-2f / 9f,
			-4f / 9f,
			-2f / 3f,
			-2f / 9f,
			-4f / 9f,
			-4f / 9f,
			-2f / 9f,
			-4f / 9f,
			-2f / 9f,
			-2f / 9f,
			-4f / 9f,
			0f,
			-2f / 9f,
			-4f / 9f,
			2f / 9f,
			-2f / 9f,
			-4f / 9f,
			4f / 9f,
			-2f / 9f,
			-4f / 9f,
			2f / 3f,
			-2f / 9f,
			-4f / 9f,
			8f / 9f,
			-2f / 9f,
			-4f / 9f,
			-8f / 9f,
			0f,
			-4f / 9f,
			-2f / 3f,
			0f,
			-4f / 9f,
			-4f / 9f,
			0f,
			-4f / 9f,
			-2f / 9f,
			0f,
			-4f / 9f,
			0f,
			0f,
			-4f / 9f,
			2f / 9f,
			0f,
			-4f / 9f,
			4f / 9f,
			0f,
			-4f / 9f,
			2f / 3f,
			0f,
			-4f / 9f,
			8f / 9f,
			0f,
			-4f / 9f,
			-8f / 9f,
			2f / 9f,
			-4f / 9f,
			-2f / 3f,
			2f / 9f,
			-4f / 9f,
			-4f / 9f,
			2f / 9f,
			-4f / 9f,
			-2f / 9f,
			2f / 9f,
			-4f / 9f,
			0f,
			2f / 9f,
			-4f / 9f,
			2f / 9f,
			2f / 9f,
			-4f / 9f,
			4f / 9f,
			2f / 9f,
			-4f / 9f,
			2f / 3f,
			2f / 9f,
			-4f / 9f,
			8f / 9f,
			2f / 9f,
			-4f / 9f,
			-8f / 9f,
			4f / 9f,
			-4f / 9f,
			-2f / 3f,
			4f / 9f,
			-4f / 9f,
			-4f / 9f,
			4f / 9f,
			-4f / 9f,
			-2f / 9f,
			4f / 9f,
			-4f / 9f,
			0f,
			4f / 9f,
			-4f / 9f,
			2f / 9f,
			4f / 9f,
			-4f / 9f,
			4f / 9f,
			4f / 9f,
			-4f / 9f,
			2f / 3f,
			4f / 9f,
			-4f / 9f,
			8f / 9f,
			4f / 9f,
			-4f / 9f,
			-8f / 9f,
			2f / 3f,
			-4f / 9f,
			-2f / 3f,
			2f / 3f,
			-4f / 9f,
			-4f / 9f,
			2f / 3f,
			-4f / 9f,
			-2f / 9f,
			2f / 3f,
			-4f / 9f,
			0f,
			2f / 3f,
			-4f / 9f,
			2f / 9f,
			2f / 3f,
			-4f / 9f,
			4f / 9f,
			2f / 3f,
			-4f / 9f,
			2f / 3f,
			2f / 3f,
			-4f / 9f,
			8f / 9f,
			2f / 3f,
			-4f / 9f,
			-8f / 9f,
			8f / 9f,
			-4f / 9f,
			-2f / 3f,
			8f / 9f,
			-4f / 9f,
			-4f / 9f,
			8f / 9f,
			-4f / 9f,
			-2f / 9f,
			8f / 9f,
			-4f / 9f,
			0f,
			8f / 9f,
			-4f / 9f,
			2f / 9f,
			8f / 9f,
			-4f / 9f,
			4f / 9f,
			8f / 9f,
			-4f / 9f,
			2f / 3f,
			8f / 9f,
			-4f / 9f,
			8f / 9f,
			8f / 9f,
			-4f / 9f,
			-8f / 9f,
			-8f / 9f,
			-2f / 9f,
			-2f / 3f,
			-8f / 9f,
			-2f / 9f,
			-4f / 9f,
			-8f / 9f,
			-2f / 9f,
			-2f / 9f,
			-8f / 9f,
			-2f / 9f,
			0f,
			-8f / 9f,
			-2f / 9f,
			2f / 9f,
			-8f / 9f,
			-2f / 9f,
			4f / 9f,
			-8f / 9f,
			-2f / 9f,
			2f / 3f,
			-8f / 9f,
			-2f / 9f,
			8f / 9f,
			-8f / 9f,
			-2f / 9f,
			-8f / 9f,
			-2f / 3f,
			-2f / 9f,
			-2f / 3f,
			-2f / 3f,
			-2f / 9f,
			-4f / 9f,
			-2f / 3f,
			-2f / 9f,
			-2f / 9f,
			-2f / 3f,
			-2f / 9f,
			0f,
			-2f / 3f,
			-2f / 9f,
			2f / 9f,
			-2f / 3f,
			-2f / 9f,
			4f / 9f,
			-2f / 3f,
			-2f / 9f,
			2f / 3f,
			-2f / 3f,
			-2f / 9f,
			8f / 9f,
			-2f / 3f,
			-2f / 9f,
			-8f / 9f,
			-4f / 9f,
			-2f / 9f,
			-2f / 3f,
			-4f / 9f,
			-2f / 9f,
			-4f / 9f,
			-4f / 9f,
			-2f / 9f,
			-2f / 9f,
			-4f / 9f,
			-2f / 9f,
			0f,
			-4f / 9f,
			-2f / 9f,
			2f / 9f,
			-4f / 9f,
			-2f / 9f,
			4f / 9f,
			-4f / 9f,
			-2f / 9f,
			2f / 3f,
			-4f / 9f,
			-2f / 9f,
			8f / 9f,
			-4f / 9f,
			-2f / 9f,
			-8f / 9f,
			-2f / 9f,
			-2f / 9f,
			-2f / 3f,
			-2f / 9f,
			-2f / 9f,
			-4f / 9f,
			-2f / 9f,
			-2f / 9f,
			-2f / 9f,
			-2f / 9f,
			-2f / 9f,
			0f,
			-2f / 9f,
			-2f / 9f,
			2f / 9f,
			-2f / 9f,
			-2f / 9f,
			4f / 9f,
			-2f / 9f,
			-2f / 9f,
			2f / 3f,
			-2f / 9f,
			-2f / 9f,
			8f / 9f,
			-2f / 9f,
			-2f / 9f,
			-8f / 9f,
			0f,
			-2f / 9f,
			-2f / 3f,
			0f,
			-2f / 9f,
			-4f / 9f,
			0f,
			-2f / 9f,
			-2f / 9f,
			0f,
			-2f / 9f,
			0f,
			0f,
			-2f / 9f,
			2f / 9f,
			0f,
			-2f / 9f,
			4f / 9f,
			0f,
			-2f / 9f,
			2f / 3f,
			0f,
			-2f / 9f,
			8f / 9f,
			0f,
			-2f / 9f,
			-8f / 9f,
			2f / 9f,
			-2f / 9f,
			-2f / 3f,
			2f / 9f,
			-2f / 9f,
			-4f / 9f,
			2f / 9f,
			-2f / 9f,
			-2f / 9f,
			2f / 9f,
			-2f / 9f,
			0f,
			2f / 9f,
			-2f / 9f,
			2f / 9f,
			2f / 9f,
			-2f / 9f,
			4f / 9f,
			2f / 9f,
			-2f / 9f,
			2f / 3f,
			2f / 9f,
			-2f / 9f,
			8f / 9f,
			2f / 9f,
			-2f / 9f,
			-8f / 9f,
			4f / 9f,
			-2f / 9f,
			-2f / 3f,
			4f / 9f,
			-2f / 9f,
			-4f / 9f,
			4f / 9f,
			-2f / 9f,
			-2f / 9f,
			4f / 9f,
			-2f / 9f,
			0f,
			4f / 9f,
			-2f / 9f,
			2f / 9f,
			4f / 9f,
			-2f / 9f,
			4f / 9f,
			4f / 9f,
			-2f / 9f,
			2f / 3f,
			4f / 9f,
			-2f / 9f,
			8f / 9f,
			4f / 9f,
			-2f / 9f,
			-8f / 9f,
			2f / 3f,
			-2f / 9f,
			-2f / 3f,
			2f / 3f,
			-2f / 9f,
			-4f / 9f,
			2f / 3f,
			-2f / 9f,
			-2f / 9f,
			2f / 3f,
			-2f / 9f,
			0f,
			2f / 3f,
			-2f / 9f,
			2f / 9f,
			2f / 3f,
			-2f / 9f,
			4f / 9f,
			2f / 3f,
			-2f / 9f,
			2f / 3f,
			2f / 3f,
			-2f / 9f,
			8f / 9f,
			2f / 3f,
			-2f / 9f,
			-8f / 9f,
			8f / 9f,
			-2f / 9f,
			-2f / 3f,
			8f / 9f,
			-2f / 9f,
			-4f / 9f,
			8f / 9f,
			-2f / 9f,
			-2f / 9f,
			8f / 9f,
			-2f / 9f,
			0f,
			8f / 9f,
			-2f / 9f,
			2f / 9f,
			8f / 9f,
			-2f / 9f,
			4f / 9f,
			8f / 9f,
			-2f / 9f,
			2f / 3f,
			8f / 9f,
			-2f / 9f,
			8f / 9f,
			8f / 9f,
			-2f / 9f,
			-8f / 9f,
			-8f / 9f,
			0f,
			-2f / 3f,
			-8f / 9f,
			0f,
			-4f / 9f,
			-8f / 9f,
			0f,
			-2f / 9f,
			-8f / 9f,
			0f,
			0f,
			-8f / 9f,
			0f,
			2f / 9f,
			-8f / 9f,
			0f,
			4f / 9f,
			-8f / 9f,
			0f,
			2f / 3f,
			-8f / 9f,
			0f,
			8f / 9f,
			-8f / 9f,
			0f,
			-8f / 9f,
			-2f / 3f,
			0f,
			-2f / 3f,
			-2f / 3f,
			0f,
			-4f / 9f,
			-2f / 3f,
			0f,
			-2f / 9f,
			-2f / 3f,
			0f,
			0f,
			-2f / 3f,
			0f,
			2f / 9f,
			-2f / 3f,
			0f,
			4f / 9f,
			-2f / 3f,
			0f,
			2f / 3f,
			-2f / 3f,
			0f,
			8f / 9f,
			-2f / 3f,
			0f,
			-8f / 9f,
			-4f / 9f,
			0f,
			-2f / 3f,
			-4f / 9f,
			0f,
			-4f / 9f,
			-4f / 9f,
			0f,
			-2f / 9f,
			-4f / 9f,
			0f,
			0f,
			-4f / 9f,
			0f,
			2f / 9f,
			-4f / 9f,
			0f,
			4f / 9f,
			-4f / 9f,
			0f,
			2f / 3f,
			-4f / 9f,
			0f,
			8f / 9f,
			-4f / 9f,
			0f,
			-8f / 9f,
			-2f / 9f,
			0f,
			-2f / 3f,
			-2f / 9f,
			0f,
			-4f / 9f,
			-2f / 9f,
			0f,
			-2f / 9f,
			-2f / 9f,
			0f,
			0f,
			-2f / 9f,
			0f,
			2f / 9f,
			-2f / 9f,
			0f,
			4f / 9f,
			-2f / 9f,
			0f,
			2f / 3f,
			-2f / 9f,
			0f,
			8f / 9f,
			-2f / 9f,
			0f,
			-8f / 9f,
			0f,
			0f,
			-2f / 3f,
			0f,
			0f,
			-4f / 9f,
			0f,
			0f,
			-2f / 9f,
			0f,
			0f,
			0f,
			0f,
			0f,
			2f / 9f,
			0f,
			0f,
			4f / 9f,
			0f,
			0f,
			2f / 3f,
			0f,
			0f,
			8f / 9f,
			0f,
			0f,
			-8f / 9f,
			2f / 9f,
			0f,
			-2f / 3f,
			2f / 9f,
			0f,
			-4f / 9f,
			2f / 9f,
			0f,
			-2f / 9f,
			2f / 9f,
			0f,
			0f,
			2f / 9f,
			0f,
			2f / 9f,
			2f / 9f,
			0f,
			4f / 9f,
			2f / 9f,
			0f,
			2f / 3f,
			2f / 9f,
			0f,
			8f / 9f,
			2f / 9f,
			0f,
			-8f / 9f,
			4f / 9f,
			0f,
			-2f / 3f,
			4f / 9f,
			0f,
			-4f / 9f,
			4f / 9f,
			0f,
			-2f / 9f,
			4f / 9f,
			0f,
			0f,
			4f / 9f,
			0f,
			2f / 9f,
			4f / 9f,
			0f,
			4f / 9f,
			4f / 9f,
			0f,
			2f / 3f,
			4f / 9f,
			0f,
			8f / 9f,
			4f / 9f,
			0f,
			-8f / 9f,
			2f / 3f,
			0f,
			-2f / 3f,
			2f / 3f,
			0f,
			-4f / 9f,
			2f / 3f,
			0f,
			-2f / 9f,
			2f / 3f,
			0f,
			0f,
			2f / 3f,
			0f,
			2f / 9f,
			2f / 3f,
			0f,
			4f / 9f,
			2f / 3f,
			0f,
			2f / 3f,
			2f / 3f,
			0f,
			8f / 9f,
			2f / 3f,
			0f,
			-8f / 9f,
			8f / 9f,
			0f,
			-2f / 3f,
			8f / 9f,
			0f,
			-4f / 9f,
			8f / 9f,
			0f,
			-2f / 9f,
			8f / 9f,
			0f,
			0f,
			8f / 9f,
			0f,
			2f / 9f,
			8f / 9f,
			0f,
			4f / 9f,
			8f / 9f,
			0f,
			2f / 3f,
			8f / 9f,
			0f,
			8f / 9f,
			8f / 9f,
			0f,
			-8f / 9f,
			-8f / 9f,
			2f / 9f,
			-2f / 3f,
			-8f / 9f,
			2f / 9f,
			-4f / 9f,
			-8f / 9f,
			2f / 9f,
			-2f / 9f,
			-8f / 9f,
			2f / 9f,
			0f,
			-8f / 9f,
			2f / 9f,
			2f / 9f,
			-8f / 9f,
			2f / 9f,
			4f / 9f,
			-8f / 9f,
			2f / 9f,
			2f / 3f,
			-8f / 9f,
			2f / 9f,
			8f / 9f,
			-8f / 9f,
			2f / 9f,
			-8f / 9f,
			-2f / 3f,
			2f / 9f,
			-2f / 3f,
			-2f / 3f,
			2f / 9f,
			-4f / 9f,
			-2f / 3f,
			2f / 9f,
			-2f / 9f,
			-2f / 3f,
			2f / 9f,
			0f,
			-2f / 3f,
			2f / 9f,
			2f / 9f,
			-2f / 3f,
			2f / 9f,
			4f / 9f,
			-2f / 3f,
			2f / 9f,
			2f / 3f,
			-2f / 3f,
			2f / 9f,
			8f / 9f,
			-2f / 3f,
			2f / 9f,
			-8f / 9f,
			-4f / 9f,
			2f / 9f,
			-2f / 3f,
			-4f / 9f,
			2f / 9f,
			-4f / 9f,
			-4f / 9f,
			2f / 9f,
			-2f / 9f,
			-4f / 9f,
			2f / 9f,
			0f,
			-4f / 9f,
			2f / 9f,
			2f / 9f,
			-4f / 9f,
			2f / 9f,
			4f / 9f,
			-4f / 9f,
			2f / 9f,
			2f / 3f,
			-4f / 9f,
			2f / 9f,
			8f / 9f,
			-4f / 9f,
			2f / 9f,
			-8f / 9f,
			-2f / 9f,
			2f / 9f,
			-2f / 3f,
			-2f / 9f,
			2f / 9f,
			-4f / 9f,
			-2f / 9f,
			2f / 9f,
			-2f / 9f,
			-2f / 9f,
			2f / 9f,
			0f,
			-2f / 9f,
			2f / 9f,
			2f / 9f,
			-2f / 9f,
			2f / 9f,
			4f / 9f,
			-2f / 9f,
			2f / 9f,
			2f / 3f,
			-2f / 9f,
			2f / 9f,
			8f / 9f,
			-2f / 9f,
			2f / 9f,
			-8f / 9f,
			0f,
			2f / 9f,
			-2f / 3f,
			0f,
			2f / 9f,
			-4f / 9f,
			0f,
			2f / 9f,
			-2f / 9f,
			0f,
			2f / 9f,
			0f,
			0f,
			2f / 9f,
			2f / 9f,
			0f,
			2f / 9f,
			4f / 9f,
			0f,
			2f / 9f,
			2f / 3f,
			0f,
			2f / 9f,
			8f / 9f,
			0f,
			2f / 9f,
			-8f / 9f,
			2f / 9f,
			2f / 9f,
			-2f / 3f,
			2f / 9f,
			2f / 9f,
			-4f / 9f,
			2f / 9f,
			2f / 9f,
			-2f / 9f,
			2f / 9f,
			2f / 9f,
			0f,
			2f / 9f,
			2f / 9f,
			2f / 9f,
			2f / 9f,
			2f / 9f,
			4f / 9f,
			2f / 9f,
			2f / 9f,
			2f / 3f,
			2f / 9f,
			2f / 9f,
			8f / 9f,
			2f / 9f,
			2f / 9f,
			-8f / 9f,
			4f / 9f,
			2f / 9f,
			-2f / 3f,
			4f / 9f,
			2f / 9f,
			-4f / 9f,
			4f / 9f,
			2f / 9f,
			-2f / 9f,
			4f / 9f,
			2f / 9f,
			0f,
			4f / 9f,
			2f / 9f,
			2f / 9f,
			4f / 9f,
			2f / 9f,
			4f / 9f,
			4f / 9f,
			2f / 9f,
			2f / 3f,
			4f / 9f,
			2f / 9f,
			8f / 9f,
			4f / 9f,
			2f / 9f,
			-8f / 9f,
			2f / 3f,
			2f / 9f,
			-2f / 3f,
			2f / 3f,
			2f / 9f,
			-4f / 9f,
			2f / 3f,
			2f / 9f,
			-2f / 9f,
			2f / 3f,
			2f / 9f,
			0f,
			2f / 3f,
			2f / 9f,
			2f / 9f,
			2f / 3f,
			2f / 9f,
			4f / 9f,
			2f / 3f,
			2f / 9f,
			2f / 3f,
			2f / 3f,
			2f / 9f,
			8f / 9f,
			2f / 3f,
			2f / 9f,
			-8f / 9f,
			8f / 9f,
			2f / 9f,
			-2f / 3f,
			8f / 9f,
			2f / 9f,
			-4f / 9f,
			8f / 9f,
			2f / 9f,
			-2f / 9f,
			8f / 9f,
			2f / 9f,
			0f,
			8f / 9f,
			2f / 9f,
			2f / 9f,
			8f / 9f,
			2f / 9f,
			4f / 9f,
			8f / 9f,
			2f / 9f,
			2f / 3f,
			8f / 9f,
			2f / 9f,
			8f / 9f,
			8f / 9f,
			2f / 9f,
			-8f / 9f,
			-8f / 9f,
			4f / 9f,
			-2f / 3f,
			-8f / 9f,
			4f / 9f,
			-4f / 9f,
			-8f / 9f,
			4f / 9f,
			-2f / 9f,
			-8f / 9f,
			4f / 9f,
			0f,
			-8f / 9f,
			4f / 9f,
			2f / 9f,
			-8f / 9f,
			4f / 9f,
			4f / 9f,
			-8f / 9f,
			4f / 9f,
			2f / 3f,
			-8f / 9f,
			4f / 9f,
			8f / 9f,
			-8f / 9f,
			4f / 9f,
			-8f / 9f,
			-2f / 3f,
			4f / 9f,
			-2f / 3f,
			-2f / 3f,
			4f / 9f,
			-4f / 9f,
			-2f / 3f,
			4f / 9f,
			-2f / 9f,
			-2f / 3f,
			4f / 9f,
			0f,
			-2f / 3f,
			4f / 9f,
			2f / 9f,
			-2f / 3f,
			4f / 9f,
			4f / 9f,
			-2f / 3f,
			4f / 9f,
			2f / 3f,
			-2f / 3f,
			4f / 9f,
			8f / 9f,
			-2f / 3f,
			4f / 9f,
			-8f / 9f,
			-4f / 9f,
			4f / 9f,
			-2f / 3f,
			-4f / 9f,
			4f / 9f,
			-4f / 9f,
			-4f / 9f,
			4f / 9f,
			-2f / 9f,
			-4f / 9f,
			4f / 9f,
			0f,
			-4f / 9f,
			4f / 9f,
			2f / 9f,
			-4f / 9f,
			4f / 9f,
			4f / 9f,
			-4f / 9f,
			4f / 9f,
			2f / 3f,
			-4f / 9f,
			4f / 9f,
			8f / 9f,
			-4f / 9f,
			4f / 9f,
			-8f / 9f,
			-2f / 9f,
			4f / 9f,
			-2f / 3f,
			-2f / 9f,
			4f / 9f,
			-4f / 9f,
			-2f / 9f,
			4f / 9f,
			-2f / 9f,
			-2f / 9f,
			4f / 9f,
			0f,
			-2f / 9f,
			4f / 9f,
			2f / 9f,
			-2f / 9f,
			4f / 9f,
			4f / 9f,
			-2f / 9f,
			4f / 9f,
			2f / 3f,
			-2f / 9f,
			4f / 9f,
			8f / 9f,
			-2f / 9f,
			4f / 9f,
			-8f / 9f,
			0f,
			4f / 9f,
			-2f / 3f,
			0f,
			4f / 9f,
			-4f / 9f,
			0f,
			4f / 9f,
			-2f / 9f,
			0f,
			4f / 9f,
			0f,
			0f,
			4f / 9f,
			2f / 9f,
			0f,
			4f / 9f,
			4f / 9f,
			0f,
			4f / 9f,
			2f / 3f,
			0f,
			4f / 9f,
			8f / 9f,
			0f,
			4f / 9f,
			-8f / 9f,
			2f / 9f,
			4f / 9f,
			-2f / 3f,
			2f / 9f,
			4f / 9f,
			-4f / 9f,
			2f / 9f,
			4f / 9f,
			-2f / 9f,
			2f / 9f,
			4f / 9f,
			0f,
			2f / 9f,
			4f / 9f,
			2f / 9f,
			2f / 9f,
			4f / 9f,
			4f / 9f,
			2f / 9f,
			4f / 9f,
			2f / 3f,
			2f / 9f,
			4f / 9f,
			8f / 9f,
			2f / 9f,
			4f / 9f,
			-8f / 9f,
			4f / 9f,
			4f / 9f,
			-2f / 3f,
			4f / 9f,
			4f / 9f,
			-4f / 9f,
			4f / 9f,
			4f / 9f,
			-2f / 9f,
			4f / 9f,
			4f / 9f,
			0f,
			4f / 9f,
			4f / 9f,
			2f / 9f,
			4f / 9f,
			4f / 9f,
			4f / 9f,
			4f / 9f,
			4f / 9f,
			2f / 3f,
			4f / 9f,
			4f / 9f,
			8f / 9f,
			4f / 9f,
			4f / 9f,
			-8f / 9f,
			2f / 3f,
			4f / 9f,
			-2f / 3f,
			2f / 3f,
			4f / 9f,
			-4f / 9f,
			2f / 3f,
			4f / 9f,
			-2f / 9f,
			2f / 3f,
			4f / 9f,
			0f,
			2f / 3f,
			4f / 9f,
			2f / 9f,
			2f / 3f,
			4f / 9f,
			4f / 9f,
			2f / 3f,
			4f / 9f,
			2f / 3f,
			2f / 3f,
			4f / 9f,
			8f / 9f,
			2f / 3f,
			4f / 9f,
			-8f / 9f,
			8f / 9f,
			4f / 9f,
			-2f / 3f,
			8f / 9f,
			4f / 9f,
			-4f / 9f,
			8f / 9f,
			4f / 9f,
			-2f / 9f,
			8f / 9f,
			4f / 9f,
			0f,
			8f / 9f,
			4f / 9f,
			2f / 9f,
			8f / 9f,
			4f / 9f,
			4f / 9f,
			8f / 9f,
			4f / 9f,
			2f / 3f,
			8f / 9f,
			4f / 9f,
			8f / 9f,
			8f / 9f,
			4f / 9f,
			-8f / 9f,
			-8f / 9f,
			2f / 3f,
			-2f / 3f,
			-8f / 9f,
			2f / 3f,
			-4f / 9f,
			-8f / 9f,
			2f / 3f,
			-2f / 9f,
			-8f / 9f,
			2f / 3f,
			0f,
			-8f / 9f,
			2f / 3f,
			2f / 9f,
			-8f / 9f,
			2f / 3f,
			4f / 9f,
			-8f / 9f,
			2f / 3f,
			2f / 3f,
			-8f / 9f,
			2f / 3f,
			8f / 9f,
			-8f / 9f,
			2f / 3f,
			-8f / 9f,
			-2f / 3f,
			2f / 3f,
			-2f / 3f,
			-2f / 3f,
			2f / 3f,
			-4f / 9f,
			-2f / 3f,
			2f / 3f,
			-2f / 9f,
			-2f / 3f,
			2f / 3f,
			0f,
			-2f / 3f,
			2f / 3f,
			2f / 9f,
			-2f / 3f,
			2f / 3f,
			4f / 9f,
			-2f / 3f,
			2f / 3f,
			2f / 3f,
			-2f / 3f,
			2f / 3f,
			8f / 9f,
			-2f / 3f,
			2f / 3f,
			-8f / 9f,
			-4f / 9f,
			2f / 3f,
			-2f / 3f,
			-4f / 9f,
			2f / 3f,
			-4f / 9f,
			-4f / 9f,
			2f / 3f,
			-2f / 9f,
			-4f / 9f,
			2f / 3f,
			0f,
			-4f / 9f,
			2f / 3f,
			2f / 9f,
			-4f / 9f,
			2f / 3f,
			4f / 9f,
			-4f / 9f,
			2f / 3f,
			2f / 3f,
			-4f / 9f,
			2f / 3f,
			8f / 9f,
			-4f / 9f,
			2f / 3f,
			-8f / 9f,
			-2f / 9f,
			2f / 3f,
			-2f / 3f,
			-2f / 9f,
			2f / 3f,
			-4f / 9f,
			-2f / 9f,
			2f / 3f,
			-2f / 9f,
			-2f / 9f,
			2f / 3f,
			0f,
			-2f / 9f,
			2f / 3f,
			2f / 9f,
			-2f / 9f,
			2f / 3f,
			4f / 9f,
			-2f / 9f,
			2f / 3f,
			2f / 3f,
			-2f / 9f,
			2f / 3f,
			8f / 9f,
			-2f / 9f,
			2f / 3f,
			-8f / 9f,
			0f,
			2f / 3f,
			-2f / 3f,
			0f,
			2f / 3f,
			-4f / 9f,
			0f,
			2f / 3f,
			-2f / 9f,
			0f,
			2f / 3f,
			0f,
			0f,
			2f / 3f,
			2f / 9f,
			0f,
			2f / 3f,
			4f / 9f,
			0f,
			2f / 3f,
			2f / 3f,
			0f,
			2f / 3f,
			8f / 9f,
			0f,
			2f / 3f,
			-8f / 9f,
			2f / 9f,
			2f / 3f,
			-2f / 3f,
			2f / 9f,
			2f / 3f,
			-4f / 9f,
			2f / 9f,
			2f / 3f,
			-2f / 9f,
			2f / 9f,
			2f / 3f,
			0f,
			2f / 9f,
			2f / 3f,
			2f / 9f,
			2f / 9f,
			2f / 3f,
			4f / 9f,
			2f / 9f,
			2f / 3f,
			2f / 3f,
			2f / 9f,
			2f / 3f,
			8f / 9f,
			2f / 9f,
			2f / 3f,
			-8f / 9f,
			4f / 9f,
			2f / 3f,
			-2f / 3f,
			4f / 9f,
			2f / 3f,
			-4f / 9f,
			4f / 9f,
			2f / 3f,
			-2f / 9f,
			4f / 9f,
			2f / 3f,
			0f,
			4f / 9f,
			2f / 3f,
			2f / 9f,
			4f / 9f,
			2f / 3f,
			4f / 9f,
			4f / 9f,
			2f / 3f,
			2f / 3f,
			4f / 9f,
			2f / 3f,
			8f / 9f,
			4f / 9f,
			2f / 3f,
			-8f / 9f,
			2f / 3f,
			2f / 3f,
			-2f / 3f,
			2f / 3f,
			2f / 3f,
			-4f / 9f,
			2f / 3f,
			2f / 3f,
			-2f / 9f,
			2f / 3f,
			2f / 3f,
			0f,
			2f / 3f,
			2f / 3f,
			2f / 9f,
			2f / 3f,
			2f / 3f,
			4f / 9f,
			2f / 3f,
			2f / 3f,
			2f / 3f,
			2f / 3f,
			2f / 3f,
			8f / 9f,
			2f / 3f,
			2f / 3f,
			-8f / 9f,
			8f / 9f,
			2f / 3f,
			-2f / 3f,
			8f / 9f,
			2f / 3f,
			-4f / 9f,
			8f / 9f,
			2f / 3f,
			-2f / 9f,
			8f / 9f,
			2f / 3f,
			0f,
			8f / 9f,
			2f / 3f,
			2f / 9f,
			8f / 9f,
			2f / 3f,
			4f / 9f,
			8f / 9f,
			2f / 3f,
			2f / 3f,
			8f / 9f,
			2f / 3f,
			8f / 9f,
			8f / 9f,
			2f / 3f,
			-8f / 9f,
			-8f / 9f,
			8f / 9f,
			-2f / 3f,
			-8f / 9f,
			8f / 9f,
			-4f / 9f,
			-8f / 9f,
			8f / 9f,
			-2f / 9f,
			-8f / 9f,
			8f / 9f,
			0f,
			-8f / 9f,
			8f / 9f,
			2f / 9f,
			-8f / 9f,
			8f / 9f,
			4f / 9f,
			-8f / 9f,
			8f / 9f,
			2f / 3f,
			-8f / 9f,
			8f / 9f,
			8f / 9f,
			-8f / 9f,
			8f / 9f,
			-8f / 9f,
			-2f / 3f,
			8f / 9f,
			-2f / 3f,
			-2f / 3f,
			8f / 9f,
			-4f / 9f,
			-2f / 3f,
			8f / 9f,
			-2f / 9f,
			-2f / 3f,
			8f / 9f,
			0f,
			-2f / 3f,
			8f / 9f,
			2f / 9f,
			-2f / 3f,
			8f / 9f,
			4f / 9f,
			-2f / 3f,
			8f / 9f,
			2f / 3f,
			-2f / 3f,
			8f / 9f,
			8f / 9f,
			-2f / 3f,
			8f / 9f,
			-8f / 9f,
			-4f / 9f,
			8f / 9f,
			-2f / 3f,
			-4f / 9f,
			8f / 9f,
			-4f / 9f,
			-4f / 9f,
			8f / 9f,
			-2f / 9f,
			-4f / 9f,
			8f / 9f,
			0f,
			-4f / 9f,
			8f / 9f,
			2f / 9f,
			-4f / 9f,
			8f / 9f,
			4f / 9f,
			-4f / 9f,
			8f / 9f,
			2f / 3f,
			-4f / 9f,
			8f / 9f,
			8f / 9f,
			-4f / 9f,
			8f / 9f,
			-8f / 9f,
			-2f / 9f,
			8f / 9f,
			-2f / 3f,
			-2f / 9f,
			8f / 9f,
			-4f / 9f,
			-2f / 9f,
			8f / 9f,
			-2f / 9f,
			-2f / 9f,
			8f / 9f,
			0f,
			-2f / 9f,
			8f / 9f,
			2f / 9f,
			-2f / 9f,
			8f / 9f,
			4f / 9f,
			-2f / 9f,
			8f / 9f,
			2f / 3f,
			-2f / 9f,
			8f / 9f,
			8f / 9f,
			-2f / 9f,
			8f / 9f,
			-8f / 9f,
			0f,
			8f / 9f,
			-2f / 3f,
			0f,
			8f / 9f,
			-4f / 9f,
			0f,
			8f / 9f,
			-2f / 9f,
			0f,
			8f / 9f,
			0f,
			0f,
			8f / 9f,
			2f / 9f,
			0f,
			8f / 9f,
			4f / 9f,
			0f,
			8f / 9f,
			2f / 3f,
			0f,
			8f / 9f,
			8f / 9f,
			0f,
			8f / 9f,
			-8f / 9f,
			2f / 9f,
			8f / 9f,
			-2f / 3f,
			2f / 9f,
			8f / 9f,
			-4f / 9f,
			2f / 9f,
			8f / 9f,
			-2f / 9f,
			2f / 9f,
			8f / 9f,
			0f,
			2f / 9f,
			8f / 9f,
			2f / 9f,
			2f / 9f,
			8f / 9f,
			4f / 9f,
			2f / 9f,
			8f / 9f,
			2f / 3f,
			2f / 9f,
			8f / 9f,
			8f / 9f,
			2f / 9f,
			8f / 9f,
			-8f / 9f,
			4f / 9f,
			8f / 9f,
			-2f / 3f,
			4f / 9f,
			8f / 9f,
			-4f / 9f,
			4f / 9f,
			8f / 9f,
			-2f / 9f,
			4f / 9f,
			8f / 9f,
			0f,
			4f / 9f,
			8f / 9f,
			2f / 9f,
			4f / 9f,
			8f / 9f,
			4f / 9f,
			4f / 9f,
			8f / 9f,
			2f / 3f,
			4f / 9f,
			8f / 9f,
			8f / 9f,
			4f / 9f,
			8f / 9f,
			-8f / 9f,
			2f / 3f,
			8f / 9f,
			-2f / 3f,
			2f / 3f,
			8f / 9f,
			-4f / 9f,
			2f / 3f,
			8f / 9f,
			-2f / 9f,
			2f / 3f,
			8f / 9f,
			0f,
			2f / 3f,
			8f / 9f,
			2f / 9f,
			2f / 3f,
			8f / 9f,
			4f / 9f,
			2f / 3f,
			8f / 9f,
			2f / 3f,
			2f / 3f,
			8f / 9f,
			8f / 9f,
			2f / 3f,
			8f / 9f,
			-8f / 9f,
			8f / 9f,
			8f / 9f,
			-2f / 3f,
			8f / 9f,
			8f / 9f,
			-4f / 9f,
			8f / 9f,
			8f / 9f,
			-2f / 9f,
			8f / 9f,
			8f / 9f,
			0f,
			8f / 9f,
			8f / 9f,
			2f / 9f,
			8f / 9f,
			8f / 9f,
			4f / 9f,
			8f / 9f,
			8f / 9f,
			2f / 3f,
			8f / 9f,
			8f / 9f,
			8f / 9f,
			8f / 9f,
			8f / 9f
		};
		tableAb1CodeLength = new int[16]
		{
			0, 5, 3, 4, 5, 6, 7, 8, 9, 10,
			11, 12, 13, 14, 15, 16
		};
		tableAb1Groupingtables = new float[16][]
		{
			null, grouping5Bits, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null
		};
		tableAb1Factor = new float[16]
		{
			0f,
			0.5f,
			0.25f,
			0.125f,
			0.0625f,
			1f / 32f,
			1f / 64f,
			1f / 128f,
			0.00390625f,
			0.001953125f,
			0.0009765625f,
			0.00048828125f,
			0.000244140625f,
			0.000122070313f,
			6.10351563E-05f,
			3.05175781E-05f
		};
		tableAb1C = new float[16]
		{
			0f, 1.33333337f, 1.14285719f, 1.06666672f, 1.032258f, 1.01587307f, 1.007874f, 1.00392163f, 1.00195694f, 1.00097752f,
			1.00048852f, 1.00024426f, 1.00012207f, 1.000061f, 1.00003052f, 1.00001526f
		};
		tableAb1D = new float[16]
		{
			0f,
			0.5f,
			0.25f,
			0.125f,
			0.0625f,
			1f / 32f,
			1f / 64f,
			1f / 128f,
			0.00390625f,
			0.001953125f,
			0.0009765625f,
			0.00048828125f,
			0.000244140625f,
			0.000122070313f,
			6.103516E-05f,
			3.051758E-05f
		};
		tableAb234Groupingtables = new float[16][]
		{
			null, grouping5Bits, grouping7Bits, null, grouping10Bits, null, null, null, null, null,
			null, null, null, null, null, null
		};
		tableAb2CodeLength = new int[16]
		{
			0, 5, 7, 3, 10, 4, 5, 6, 7, 8,
			9, 10, 11, 12, 13, 16
		};
		tableAb2Factor = new float[16]
		{
			0f,
			0.5f,
			0.25f,
			0.25f,
			0.125f,
			0.125f,
			0.0625f,
			1f / 32f,
			1f / 64f,
			1f / 128f,
			0.00390625f,
			0.001953125f,
			0.0009765625f,
			0.00048828125f,
			0.000244140625f,
			3.05175781E-05f
		};
		table_ab2_c = new float[16]
		{
			0f, 1.33333337f, 1.6f, 1.14285719f, 1.77777779f, 1.06666672f, 1.032258f, 1.01587307f, 1.007874f, 1.00392163f,
			1.00195694f, 1.00097752f, 1.00048852f, 1.00024426f, 1.00012207f, 1.00001526f
		};
		table_ab2_d = new float[16]
		{
			0f,
			0.5f,
			0.5f,
			0.25f,
			0.5f,
			0.125f,
			0.0625f,
			1f / 32f,
			1f / 64f,
			1f / 128f,
			0.00390625f,
			0.001953125f,
			0.0009765625f,
			0.00048828125f,
			0.000244140625f,
			3.051758E-05f
		};
		tableAb3CodeLength = new int[8] { 0, 5, 7, 3, 10, 4, 5, 16 };
		tableAb3Factor = new float[8] { 0f, 0.5f, 0.25f, 0.25f, 0.125f, 0.125f, 0.0625f, 3.05175781E-05f };
		tableAb3C = new float[8] { 0f, 1.33333337f, 1.6f, 1.14285719f, 1.77777779f, 1.06666672f, 1.032258f, 1.00001526f };
		tableAb3D = new float[8] { 0f, 0.5f, 0.5f, 0.25f, 0.5f, 0.125f, 0.0625f, 3.051758E-05f };
		tableAb4CodeLength = new int[4] { 0, 5, 7, 16 };
		tableAb4Factor = new float[4] { 0f, 0.5f, 0.25f, 3.05175781E-05f };
		tableAb4C = new float[4] { 0f, 1.33333337f, 1.6f, 1.00001526f };
		tableAb4D = new float[4] { 0f, 0.5f, 0.5f, 3.051758E-05f };
		tableCdCodelength = new int[16]
		{
			0, 5, 7, 10, 4, 5, 6, 7, 8, 9,
			10, 11, 12, 13, 14, 15
		};
		tableCdGroupingtables = new float[16][]
		{
			null, grouping5Bits, grouping7Bits, grouping10Bits, null, null, null, null, null, null,
			null, null, null, null, null, null
		};
		tableCdFactor = new float[16]
		{
			0f,
			0.5f,
			0.25f,
			0.125f,
			0.125f,
			0.0625f,
			1f / 32f,
			1f / 64f,
			1f / 128f,
			0.00390625f,
			0.001953125f,
			0.0009765625f,
			0.00048828125f,
			0.000244140625f,
			0.000122070313f,
			6.10351563E-05f
		};
		tableCdC = new float[16]
		{
			0f, 1.33333337f, 1.6f, 1.77777779f, 1.06666672f, 1.032258f, 1.01587307f, 1.007874f, 1.00392163f, 1.00195694f,
			1.00097752f, 1.00048852f, 1.00024426f, 1.00012207f, 1.000061f, 1.00003052f
		};
		tableCdD = new float[16]
		{
			0f,
			0.5f,
			0.5f,
			0.5f,
			0.125f,
			0.0625f,
			1f / 32f,
			1f / 64f,
			1f / 128f,
			0.00390625f,
			0.001953125f,
			0.0009765625f,
			0.00048828125f,
			0.000244140625f,
			0.000122070313f,
			6.103516E-05f
		};
		tab1 = VLCBuilder.createVLCBuilder(new int[4] { 1, 1, 1, 0 }, new int[4] { 1, 2, 3, 3 }, new int[4] { 0, 16, 1, 17 }).getVLC();
		tab2 = VLCBuilder.createVLCBuilder(new int[9] { 1, 3, 2, 1, 3, 2, 1, 1, 0 }, new int[9] { 1, 3, 3, 3, 5, 5, 5, 6, 6 }, new int[9] { 0, 16, 1, 17, 32, 33, 18, 2, 34 }).getVLC();
		tab3 = VLCBuilder.createVLCBuilder(new int[9] { 3, 2, 1, 1, 3, 2, 1, 1, 0 }, new int[9] { 2, 2, 2, 3, 5, 5, 5, 6, 6 }, new int[9] { 0, 1, 17, 16, 32, 33, 18, 2, 34 }).getVLC();
		tab5 = VLCBuilder.createVLCBuilder(new int[16]
		{
			1, 3, 2, 1, 7, 6, 5, 4, 7, 6,
			5, 4, 1, 1, 1, 0
		}, new int[16]
		{
			1, 3, 3, 3, 6, 6, 6, 6, 7, 7,
			7, 7, 6, 7, 8, 8
		}, new int[16]
		{
			0, 16, 1, 17, 32, 2, 33, 18, 34, 48,
			3, 19, 49, 50, 35, 51
		}).getVLC();
		tab6 = VLCBuilder.createVLCBuilder(new int[16]
		{
			7, 6, 2, 3, 5, 4, 3, 5, 4, 3,
			2, 3, 2, 1, 1, 0
		}, new int[16]
		{
			3, 3, 2, 3, 4, 4, 4, 5, 5, 5,
			5, 6, 6, 6, 7, 7
		}, new int[16]
		{
			0, 16, 17, 1, 32, 33, 18, 2, 34, 49,
			19, 48, 50, 35, 3, 51
		}).getVLC();
		tab7 = VLCBuilder.createVLCBuilder(new int[36]
		{
			1, 3, 2, 3, 11, 10, 4, 7, 13, 12,
			11, 10, 19, 18, 17, 16, 7, 6, 5, 9,
			8, 15, 14, 6, 11, 10, 4, 3, 5, 4,
			3, 2, 3, 2, 1, 0
		}, new int[36]
		{
			1, 3, 3, 4, 6, 6, 5, 6, 7, 7,
			7, 7, 8, 8, 8, 8, 7, 7, 7, 8,
			8, 9, 9, 8, 9, 9, 8, 8, 9, 9,
			9, 9, 10, 10, 10, 10
		}, new int[36]
		{
			0, 16, 1, 17, 32, 2, 33, 18, 34, 48,
			49, 19, 3, 50, 35, 4, 64, 65, 20, 66,
			36, 51, 67, 80, 52, 5, 81, 21, 82, 37,
			68, 53, 83, 84, 69, 85
		}).getVLC();
		tab8 = VLCBuilder.createVLCBuilder(new int[36]
		{
			3, 5, 4, 1, 3, 2, 7, 6, 5, 19,
			18, 17, 16, 15, 14, 13, 12, 5, 9, 8,
			7, 13, 12, 11, 10, 4, 3, 5, 4, 3,
			5, 4, 1, 1, 1, 0
		}, new int[36]
		{
			2, 3, 3, 2, 4, 4, 6, 6, 6, 8,
			8, 8, 8, 8, 8, 8, 8, 7, 8, 8,
			8, 9, 9, 9, 9, 8, 8, 9, 9, 9,
			10, 10, 9, 10, 11, 11
		}, new int[36]
		{
			0, 16, 1, 17, 33, 18, 32, 2, 34, 48,
			3, 49, 19, 50, 35, 64, 4, 65, 20, 66,
			36, 51, 80, 67, 52, 81, 21, 5, 82, 37,
			68, 53, 83, 69, 84, 85
		}).getVLC();
		tab9 = VLCBuilder.createVLCBuilder(new int[36]
		{
			7, 6, 5, 4, 7, 6, 5, 9, 8, 15,
			14, 6, 5, 9, 8, 7, 6, 11, 10, 9,
			8, 15, 14, 6, 5, 4, 7, 6, 5, 4,
			7, 6, 2, 1, 1, 0
		}, new int[36]
		{
			3, 3, 3, 3, 4, 4, 4, 5, 5, 6,
			6, 5, 5, 6, 6, 6, 6, 7, 7, 7,
			7, 8, 8, 7, 7, 7, 8, 8, 8, 8,
			9, 9, 8, 8, 9, 9
		}, new int[36]
		{
			0, 16, 1, 17, 32, 33, 18, 2, 34, 48,
			3, 49, 19, 50, 35, 65, 20, 64, 51, 66,
			36, 4, 80, 67, 52, 81, 21, 82, 37, 68,
			5, 84, 83, 53, 69, 85
		}).getVLC();
		tab10 = VLCBuilder.createVLCBuilder(new int[64]
		{
			1, 3, 2, 3, 11, 10, 9, 8, 15, 14,
			13, 12, 23, 22, 21, 20, 19, 18, 35, 34,
			33, 32, 31, 30, 14, 13, 12, 47, 46, 22,
			21, 41, 40, 19, 18, 8, 7, 27, 26, 12,
			23, 22, 10, 9, 17, 16, 7, 6, 11, 21,
			20, 9, 8, 7, 6, 5, 4, 3, 5, 4,
			3, 2, 1, 0
		}, new int[64]
		{
			1, 3, 3, 4, 6, 6, 6, 6, 7, 7,
			7, 7, 8, 8, 8, 8, 8, 8, 9, 9,
			9, 9, 9, 9, 8, 8, 8, 10, 10, 9,
			9, 10, 10, 9, 9, 8, 8, 10, 10, 9,
			10, 10, 9, 9, 10, 10, 9, 9, 10, 11,
			11, 10, 10, 10, 10, 10, 10, 10, 11, 11,
			11, 11, 11, 11
		}, new int[64]
		{
			0, 16, 1, 17, 32, 2, 33, 18, 34, 48,
			49, 19, 3, 50, 35, 64, 65, 20, 4, 51,
			66, 36, 80, 5, 96, 97, 22, 67, 52, 81,
			21, 82, 37, 38, 54, 113, 23, 68, 83, 6,
			53, 69, 98, 112, 7, 100, 114, 39, 99, 84,
			85, 70, 115, 55, 101, 86, 116, 71, 102, 117,
			87, 118, 103, 119
		}).getVLC();
		tab11 = VLCBuilder.createVLCBuilder(new int[64]
		{
			3, 5, 4, 3, 11, 10, 4, 7, 13, 25,
			24, 11, 10, 19, 18, 35, 34, 33, 32, 31,
			30, 59, 58, 28, 27, 26, 12, 11, 21, 20,
			9, 17, 33, 32, 31, 30, 14, 13, 12, 11,
			10, 4, 15, 14, 6, 5, 19, 18, 17, 16,
			7, 6, 5, 9, 8, 15, 14, 6, 5, 4,
			3, 2, 1, 0
		}, new int[64]
		{
			2, 3, 3, 3, 5, 5, 4, 5, 6, 7,
			7, 6, 6, 7, 7, 8, 8, 8, 8, 8,
			8, 9, 9, 8, 8, 8, 7, 7, 8, 8,
			7, 8, 9, 9, 9, 9, 8, 8, 8, 8,
			8, 7, 9, 9, 8, 8, 10, 10, 10, 10,
			9, 9, 9, 10, 10, 11, 11, 10, 10, 10,
			10, 10, 10, 10
		}, new int[64]
		{
			0, 16, 1, 17, 32, 2, 18, 33, 34, 48,
			3, 49, 19, 50, 35, 64, 4, 65, 20, 66,
			36, 51, 67, 80, 52, 81, 97, 22, 6, 38,
			98, 21, 5, 82, 37, 68, 96, 99, 54, 112,
			23, 113, 7, 100, 114, 39, 83, 53, 84, 69,
			70, 115, 55, 101, 86, 85, 87, 116, 71, 102,
			117, 118, 103, 119
		}).getVLC();
		tab12 = VLCBuilder.createVLCBuilder(new int[64]
		{
			7, 6, 5, 9, 17, 16, 7, 6, 11, 10,
			9, 17, 33, 32, 15, 14, 13, 12, 23, 22,
			21, 41, 40, 19, 18, 17, 16, 31, 30, 29,
			28, 27, 26, 12, 11, 10, 39, 38, 18, 17,
			16, 15, 14, 27, 26, 12, 11, 10, 9, 8,
			7, 13, 12, 5, 4, 7, 6, 5, 4, 3,
			2, 1, 1, 0
		}, new int[64]
		{
			3, 3, 3, 4, 5, 5, 4, 4, 5, 5,
			5, 6, 7, 7, 6, 6, 6, 6, 7, 7,
			7, 8, 8, 7, 7, 7, 7, 8, 8, 8,
			8, 8, 8, 7, 7, 7, 9, 9, 8, 8,
			8, 8, 8, 9, 9, 8, 8, 8, 8, 8,
			8, 9, 9, 8, 8, 9, 9, 9, 9, 9,
			9, 9, 10, 10
		}, new int[64]
		{
			16, 1, 17, 0, 32, 2, 33, 18, 34, 49,
			19, 48, 3, 64, 50, 35, 65, 51, 20, 66,
			36, 4, 80, 67, 52, 81, 21, 82, 37, 83,
			53, 96, 22, 97, 98, 38, 5, 6, 68, 84,
			69, 99, 54, 112, 7, 113, 23, 100, 70, 114,
			39, 85, 115, 55, 86, 101, 116, 71, 102, 117,
			87, 118, 103, 119
		}).getVLC();
		tab13 = VLCBuilder.createVLCBuilder(new int[256]
		{
			1, 3, 5, 4, 15, 14, 13, 12, 23, 22,
			21, 20, 19, 37, 36, 35, 34, 16, 31, 61,
			60, 59, 58, 57, 56, 27, 26, 51, 50, 49,
			97, 96, 47, 46, 45, 44, 43, 42, 20, 79,
			78, 77, 76, 75, 74, 73, 72, 71, 70, 34,
			33, 65, 64, 31, 30, 29, 115, 114, 56, 55,
			54, 53, 52, 25, 24, 95, 94, 93, 92, 91,
			90, 44, 43, 85, 84, 41, 40, 79, 78, 77,
			76, 37, 73, 72, 35, 69, 68, 33, 32, 31,
			30, 59, 58, 57, 56, 55, 54, 53, 52, 25,
			24, 23, 91, 90, 44, 87, 86, 42, 83, 82,
			40, 79, 78, 38, 37, 73, 72, 71, 70, 34,
			67, 66, 32, 31, 61, 60, 29, 28, 27, 26,
			51, 50, 49, 48, 47, 46, 45, 44, 21, 41,
			81, 80, 39, 77, 76, 75, 74, 36, 35, 34,
			33, 65, 64, 31, 30, 59, 58, 57, 56, 55,
			54, 53, 52, 51, 50, 49, 48, 23, 22, 43,
			42, 20, 39, 38, 37, 36, 35, 34, 16, 15,
			14, 55, 54, 26, 25, 49, 48, 23, 45, 44,
			21, 41, 40, 19, 37, 36, 17, 16, 31, 30,
			14, 27, 53, 52, 25, 24, 23, 22, 21, 20,
			19, 18, 17, 16, 15, 29, 28, 27, 26, 12,
			11, 43, 42, 20, 39, 38, 18, 17, 16, 15,
			14, 13, 12, 11, 10, 9, 17, 16, 7, 6,
			23, 22, 10, 9, 8, 7, 6, 5, 4, 3,
			2, 1, 1, 1, 1, 0
		}, new int[256]
		{
			1, 3, 4, 4, 6, 6, 6, 6, 7, 7,
			7, 7, 7, 8, 8, 8, 8, 7, 8, 9,
			9, 9, 9, 9, 9, 8, 8, 9, 9, 9,
			10, 10, 9, 9, 9, 9, 9, 9, 8, 10,
			10, 10, 10, 10, 10, 10, 10, 10, 10, 9,
			9, 10, 10, 9, 9, 9, 11, 11, 10, 10,
			10, 10, 10, 9, 9, 11, 11, 11, 11, 11,
			11, 10, 10, 11, 11, 10, 10, 11, 11, 11,
			11, 10, 11, 11, 10, 11, 11, 10, 10, 10,
			10, 11, 11, 11, 11, 11, 11, 11, 11, 10,
			10, 10, 12, 12, 11, 12, 12, 11, 12, 12,
			11, 12, 12, 11, 11, 12, 12, 12, 12, 11,
			12, 12, 11, 11, 12, 12, 11, 11, 11, 11,
			12, 12, 12, 12, 12, 12, 12, 12, 11, 12,
			13, 13, 12, 13, 13, 13, 13, 12, 12, 12,
			12, 13, 13, 12, 12, 13, 13, 13, 13, 13,
			13, 13, 13, 13, 13, 13, 13, 12, 12, 13,
			13, 12, 13, 13, 13, 13, 13, 13, 12, 12,
			12, 14, 14, 13, 13, 14, 14, 13, 14, 14,
			13, 14, 14, 13, 14, 14, 13, 13, 14, 14,
			13, 14, 15, 15, 14, 14, 14, 14, 14, 14,
			14, 14, 14, 14, 14, 15, 15, 15, 15, 14,
			14, 16, 16, 15, 16, 16, 15, 15, 15, 15,
			15, 15, 15, 15, 15, 15, 16, 16, 15, 15,
			17, 17, 16, 16, 16, 16, 16, 16, 16, 16,
			16, 16, 17, 18, 19, 19
		}, new int[256]
		{
			0, 16, 1, 17, 32, 2, 33, 18, 34, 48,
			3, 49, 19, 50, 35, 64, 4, 65, 20, 51,
			66, 36, 80, 67, 52, 81, 21, 5, 82, 37,
			68, 83, 96, 6, 97, 22, 128, 8, 129, 53,
			98, 38, 84, 69, 99, 54, 112, 7, 85, 113,
			23, 39, 55, 24, 130, 40, 100, 70, 114, 132,
			72, 144, 9, 145, 25, 115, 101, 86, 116, 71,
			102, 131, 56, 117, 87, 146, 41, 103, 133, 88,
			57, 147, 73, 134, 160, 104, 10, 161, 26, 162,
			42, 149, 89, 163, 58, 74, 150, 176, 11, 177,
			27, 178, 118, 119, 148, 135, 120, 164, 105, 165,
			43, 90, 136, 179, 59, 121, 166, 106, 180, 192,
			12, 152, 193, 28, 137, 181, 91, 194, 44, 60,
			182, 107, 196, 76, 168, 138, 208, 13, 209, 75,
			151, 167, 195, 122, 153, 197, 92, 183, 29, 210,
			45, 123, 211, 61, 198, 108, 169, 154, 212, 184,
			139, 77, 199, 124, 213, 93, 224, 225, 30, 14,
			46, 226, 227, 109, 140, 228, 229, 186, 240, 241,
			31, 170, 155, 185, 62, 214, 200, 78, 215, 125,
			171, 94, 201, 15, 156, 110, 242, 47, 216, 141,
			63, 243, 230, 202, 244, 79, 187, 172, 231, 245,
			217, 157, 95, 232, 111, 246, 203, 188, 173, 218,
			247, 126, 127, 142, 158, 174, 204, 248, 143, 219,
			189, 234, 249, 159, 235, 190, 205, 250, 221, 236,
			233, 175, 220, 206, 251, 191, 222, 207, 238, 223,
			239, 255, 237, 253, 252, 254
		}).getVLC();
		tab15 = VLCBuilder.createVLCBuilder(new int[256]
		{
			7, 13, 12, 5, 19, 18, 17, 16, 15, 29,
			28, 27, 53, 52, 25, 24, 47, 46, 22, 43,
			42, 41, 40, 39, 77, 76, 37, 36, 35, 34,
			67, 66, 32, 63, 125, 124, 61, 60, 59, 58,
			57, 56, 55, 109, 108, 53, 52, 51, 50, 49,
			48, 95, 94, 93, 92, 91, 90, 89, 88, 43,
			42, 41, 40, 79, 78, 77, 76, 75, 74, 73,
			72, 71, 70, 34, 67, 66, 65, 64, 63, 62,
			123, 122, 60, 59, 58, 57, 56, 55, 109, 108,
			53, 52, 51, 50, 49, 48, 47, 93, 92, 91,
			90, 89, 88, 87, 86, 42, 83, 82, 40, 79,
			78, 77, 76, 37, 73, 72, 71, 70, 69, 68,
			67, 66, 65, 64, 63, 62, 30, 119, 118, 58,
			57, 56, 55, 54, 107, 106, 52, 51, 50, 49,
			48, 47, 46, 91, 90, 44, 43, 42, 41, 81,
			80, 39, 38, 75, 74, 73, 72, 71, 70, 34,
			67, 66, 65, 64, 63, 62, 123, 122, 60, 59,
			58, 57, 56, 55, 54, 53, 52, 51, 50, 49,
			48, 47, 46, 45, 44, 43, 42, 41, 40, 39,
			38, 37, 36, 71, 70, 34, 33, 32, 31, 30,
			29, 28, 27, 53, 52, 25, 24, 23, 22, 21,
			20, 39, 38, 37, 36, 17, 16, 63, 62, 30,
			29, 28, 27, 26, 25, 24, 23, 22, 21, 20,
			19, 18, 17, 16, 15, 14, 13, 12, 11, 10,
			9, 8, 15, 14, 6, 11, 10, 9, 8, 7,
			6, 2, 3, 2, 1, 0
		}, new int[256]
		{
			3, 4, 4, 3, 5, 5, 5, 5, 5, 6,
			6, 6, 7, 7, 6, 6, 7, 7, 6, 7,
			7, 7, 7, 7, 8, 8, 7, 7, 7, 7,
			8, 8, 7, 8, 9, 9, 8, 8, 8, 8,
			8, 8, 8, 9, 9, 8, 8, 8, 8, 8,
			8, 9, 9, 9, 9, 9, 9, 9, 9, 8,
			8, 8, 8, 9, 9, 9, 9, 9, 9, 9,
			9, 9, 9, 8, 9, 9, 9, 9, 9, 9,
			10, 10, 9, 9, 9, 9, 9, 9, 10, 10,
			9, 9, 9, 9, 9, 9, 9, 10, 10, 10,
			10, 10, 10, 10, 10, 9, 10, 10, 9, 10,
			10, 10, 10, 9, 10, 10, 10, 10, 10, 10,
			10, 10, 10, 10, 10, 10, 9, 11, 11, 10,
			10, 10, 10, 10, 11, 11, 10, 10, 10, 10,
			10, 10, 10, 11, 11, 10, 10, 10, 10, 11,
			11, 10, 10, 11, 11, 11, 11, 11, 11, 10,
			11, 11, 11, 11, 11, 11, 12, 12, 11, 11,
			11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
			11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
			11, 11, 11, 12, 12, 11, 11, 11, 11, 11,
			11, 11, 11, 12, 12, 11, 11, 11, 11, 11,
			11, 12, 12, 12, 12, 11, 11, 13, 13, 12,
			12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
			12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
			12, 12, 13, 13, 12, 13, 13, 13, 13, 13,
			13, 12, 13, 13, 13, 13
		}, new int[256]
		{
			0, 16, 1, 17, 32, 2, 33, 18, 34, 48,
			49, 19, 3, 64, 50, 35, 4, 20, 65, 51,
			66, 36, 67, 52, 80, 5, 81, 21, 82, 37,
			68, 83, 97, 53, 96, 6, 22, 98, 38, 84,
			69, 99, 54, 112, 7, 113, 85, 23, 100, 114,
			39, 70, 115, 55, 101, 86, 128, 8, 116, 129,
			24, 130, 40, 71, 102, 131, 56, 117, 87, 132,
			72, 144, 25, 145, 146, 118, 103, 41, 133, 88,
			9, 119, 147, 57, 148, 73, 134, 104, 160, 10,
			161, 26, 162, 42, 149, 89, 163, 58, 135, 120,
			164, 74, 150, 105, 176, 177, 27, 165, 178, 90,
			43, 136, 151, 179, 121, 59, 106, 180, 75, 193,
			152, 137, 28, 181, 91, 44, 194, 11, 192, 166,
			167, 122, 195, 60, 12, 153, 182, 107, 196, 76,
			168, 138, 197, 208, 92, 209, 183, 123, 29, 13,
			45, 210, 211, 61, 198, 108, 169, 154, 184, 212,
			139, 77, 199, 124, 213, 93, 224, 14, 225, 30,
			226, 170, 46, 185, 155, 227, 214, 109, 62, 200,
			140, 228, 78, 215, 125, 229, 186, 171, 94, 201,
			156, 241, 31, 240, 110, 242, 47, 230, 216, 243,
			63, 244, 79, 141, 217, 187, 202, 172, 231, 126,
			245, 157, 95, 232, 142, 246, 203, 15, 174, 111,
			188, 218, 173, 247, 127, 233, 158, 204, 248, 143,
			219, 189, 234, 249, 159, 220, 205, 235, 190, 250,
			175, 221, 236, 206, 251, 191, 237, 222, 252, 207,
			253, 238, 223, 254, 239, 255
		}).getVLC();
		tab16 = VLCBuilder.createVLCBuilder(new int[256]
		{
			1, 3, 5, 4, 15, 14, 13, 12, 23, 45,
			44, 21, 20, 39, 38, 75, 74, 36, 35, 69,
			68, 67, 66, 65, 64, 63, 62, 30, 59, 58,
			115, 114, 56, 111, 110, 54, 53, 52, 103, 102,
			101, 100, 99, 98, 48, 47, 93, 185, 184, 91,
			90, 179, 178, 88, 87, 173, 172, 85, 84, 83,
			165, 164, 81, 161, 160, 159, 158, 157, 156, 155,
			154, 76, 75, 149, 148, 73, 72, 143, 142, 141,
			140, 139, 138, 68, 67, 133, 265, 264, 131, 261,
			260, 129, 257, 256, 127, 253, 252, 125, 249, 248,
			247, 246, 245, 244, 243, 242, 120, 119, 118, 117,
			233, 232, 115, 229, 228, 227, 226, 225, 224, 223,
			222, 110, 219, 218, 217, 216, 107, 427, 426, 212,
			211, 210, 209, 208, 207, 206, 102, 407, 406, 202,
			201, 401, 400, 199, 397, 396, 395, 394, 393, 392,
			195, 389, 388, 387, 386, 385, 384, 383, 382, 381,
			380, 379, 378, 377, 376, 187, 747, 746, 372, 743,
			742, 370, 369, 737, 736, 735, 734, 366, 365, 364,
			727, 726, 362, 723, 722, 721, 720, 359, 358, 715,
			714, 713, 712, 711, 710, 709, 708, 707, 706, 352,
			10, 9, 17, 16, 7, 223, 445, 889, 888, 443,
			885, 884, 883, 882, 440, 439, 877, 876, 437, 436,
			871, 870, 434, 1735, 1734, 866, 865, 3459, 3458, 1728,
			26, 12, 11, 10, 9, 17, 16, 3, 11, 10,
			9, 8, 7, 13, 12, 11, 10, 4, 7, 6,
			5, 4, 3, 2, 1, 0
		}, new int[256]
		{
			1, 3, 4, 4, 6, 6, 6, 6, 7, 8,
			8, 7, 7, 8, 8, 9, 9, 8, 8, 9,
			9, 9, 9, 9, 9, 9, 9, 8, 9, 9,
			10, 10, 9, 10, 10, 9, 9, 9, 10, 10,
			10, 10, 10, 10, 9, 9, 10, 11, 11, 10,
			10, 11, 11, 10, 10, 11, 11, 10, 10, 10,
			11, 11, 10, 11, 11, 11, 11, 11, 11, 11,
			11, 10, 10, 11, 11, 10, 10, 11, 11, 11,
			11, 11, 11, 10, 10, 11, 12, 12, 11, 12,
			12, 11, 12, 12, 11, 12, 12, 11, 12, 12,
			12, 12, 12, 12, 12, 12, 11, 11, 11, 11,
			12, 12, 11, 12, 12, 12, 12, 12, 12, 12,
			12, 11, 12, 12, 12, 12, 11, 13, 13, 12,
			12, 12, 12, 12, 12, 12, 11, 13, 13, 12,
			12, 13, 13, 12, 13, 13, 13, 13, 13, 13,
			12, 13, 13, 13, 13, 13, 13, 13, 13, 13,
			13, 13, 13, 13, 13, 12, 14, 14, 13, 14,
			14, 13, 13, 14, 14, 14, 14, 13, 13, 13,
			14, 14, 13, 14, 14, 14, 14, 13, 13, 14,
			14, 14, 14, 14, 14, 14, 14, 14, 14, 13,
			8, 8, 9, 9, 8, 13, 14, 15, 15, 14,
			15, 15, 15, 15, 14, 14, 15, 15, 14, 14,
			15, 15, 14, 16, 16, 15, 15, 17, 17, 16,
			10, 9, 9, 9, 9, 10, 10, 8, 10, 10,
			10, 10, 10, 11, 11, 11, 11, 10, 11, 11,
			11, 11, 11, 11, 11, 11
		}, new int[256]
		{
			0, 16, 1, 17, 32, 2, 33, 18, 34, 48,
			3, 49, 19, 50, 35, 64, 4, 65, 20, 51,
			66, 36, 80, 67, 52, 5, 21, 81, 82, 37,
			68, 53, 83, 96, 6, 97, 22, 98, 38, 84,
			69, 99, 54, 112, 113, 23, 7, 85, 100, 114,
			39, 70, 101, 115, 55, 86, 8, 128, 129, 24,
			116, 71, 130, 40, 102, 131, 56, 117, 132, 72,
			144, 145, 25, 9, 118, 146, 41, 133, 88, 147,
			57, 160, 10, 26, 162, 103, 87, 73, 148, 119,
			134, 161, 104, 149, 42, 89, 58, 163, 135, 120,
			164, 74, 150, 105, 176, 11, 177, 27, 178, 43,
			165, 90, 179, 166, 106, 180, 75, 12, 193, 181,
			194, 44, 167, 195, 107, 196, 29, 136, 151, 59,
			209, 210, 45, 211, 30, 46, 226, 121, 152, 192,
			28, 137, 91, 60, 122, 182, 76, 153, 168, 138,
			13, 197, 92, 61, 198, 108, 154, 139, 77, 199,
			124, 213, 93, 224, 14, 227, 208, 183, 123, 169,
			184, 212, 225, 170, 185, 155, 214, 109, 62, 200,
			140, 228, 78, 215, 229, 186, 171, 156, 230, 110,
			216, 141, 187, 231, 157, 232, 142, 203, 188, 158,
			241, 31, 15, 47, 242, 189, 94, 125, 201, 202,
			172, 126, 218, 173, 204, 174, 219, 220, 205, 190,
			235, 237, 238, 217, 234, 233, 222, 221, 236, 206,
			63, 240, 243, 244, 79, 245, 95, 255, 246, 111,
			247, 127, 143, 248, 249, 159, 250, 175, 251, 191,
			252, 207, 253, 223, 254, 239
		}).getVLC();
		tab24 = VLCBuilder.createVLCBuilder(new int[256]
		{
			15, 14, 13, 12, 47, 46, 22, 21, 41, 81,
			80, 39, 38, 75, 74, 147, 146, 72, 71, 70,
			69, 68, 135, 134, 66, 263, 262, 130, 129, 128,
			127, 126, 125, 249, 248, 123, 122, 121, 120, 119,
			118, 117, 116, 115, 114, 113, 112, 111, 221, 220,
			109, 435, 434, 216, 215, 214, 427, 426, 212, 211,
			210, 209, 208, 207, 206, 205, 204, 203, 202, 201,
			200, 199, 198, 197, 196, 195, 194, 193, 192, 191,
			190, 189, 188, 187, 186, 185, 184, 183, 182, 181,
			180, 179, 178, 177, 353, 352, 175, 174, 347, 346,
			345, 344, 171, 341, 340, 169, 168, 335, 669, 668,
			333, 332, 331, 330, 164, 327, 653, 652, 325, 649,
			648, 323, 322, 321, 320, 319, 318, 317, 316, 315,
			314, 313, 312, 311, 621, 620, 309, 308, 307, 306,
			305, 304, 303, 302, 301, 300, 299, 298, 297, 296,
			295, 294, 293, 292, 291, 290, 289, 288, 287, 286,
			285, 284, 283, 282, 281, 280, 279, 278, 277, 276,
			275, 274, 273, 272, 271, 541, 540, 269, 268, 267,
			266, 531, 530, 264, 263, 262, 261, 521, 520, 259,
			517, 1033, 1032, 515, 514, 513, 512, 3, 383, 382,
			381, 380, 379, 378, 377, 376, 375, 374, 373, 372,
			371, 370, 369, 368, 367, 366, 365, 364, 363, 362,
			361, 360, 359, 358, 357, 356, 88, 43, 42, 20,
			19, 18, 17, 16, 15, 14, 13, 12, 11, 10,
			9, 17, 16, 7, 6, 11, 10, 4, 7, 6,
			5, 4, 3, 2, 1, 0
		}, new int[256]
		{
			4, 4, 4, 4, 6, 6, 5, 5, 6, 7,
			7, 6, 6, 7, 7, 8, 8, 7, 7, 7,
			7, 7, 8, 8, 7, 9, 9, 8, 8, 8,
			8, 8, 8, 9, 9, 8, 8, 8, 8, 8,
			8, 8, 8, 8, 8, 8, 8, 8, 9, 9,
			8, 10, 10, 9, 9, 9, 10, 10, 9, 9,
			9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
			9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
			9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
			9, 9, 9, 9, 10, 10, 9, 9, 10, 10,
			10, 10, 9, 10, 10, 9, 9, 10, 11, 11,
			10, 10, 10, 10, 9, 10, 11, 11, 10, 11,
			11, 10, 10, 10, 10, 10, 10, 10, 10, 10,
			10, 10, 10, 10, 11, 11, 10, 10, 10, 10,
			10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
			10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
			10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
			10, 10, 10, 10, 10, 11, 11, 10, 10, 10,
			10, 11, 11, 10, 10, 10, 10, 11, 11, 10,
			11, 12, 12, 11, 11, 11, 11, 4, 11, 11,
			11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
			11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
			11, 11, 11, 11, 11, 11, 9, 8, 8, 7,
			7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
			7, 8, 8, 7, 7, 8, 8, 7, 8, 8,
			8, 8, 8, 8, 8, 8
		}, new int[256]
		{
			0, 16, 1, 17, 32, 2, 33, 18, 34, 48,
			3, 49, 19, 50, 35, 64, 4, 65, 20, 51,
			66, 36, 67, 52, 81, 80, 5, 21, 82, 37,
			68, 83, 53, 96, 6, 97, 22, 98, 38, 84,
			69, 99, 54, 113, 85, 100, 70, 114, 39, 55,
			115, 112, 7, 23, 101, 86, 128, 8, 129, 116,
			71, 24, 130, 40, 102, 131, 56, 117, 87, 132,
			72, 145, 25, 146, 118, 103, 41, 133, 88, 147,
			57, 148, 73, 119, 134, 104, 161, 162, 42, 149,
			89, 163, 58, 135, 120, 74, 164, 150, 105, 177,
			27, 165, 178, 90, 43, 136, 179, 144, 9, 160,
			151, 121, 166, 106, 180, 26, 10, 176, 59, 11,
			192, 75, 193, 152, 137, 28, 181, 91, 194, 44,
			167, 122, 195, 60, 12, 208, 182, 107, 196, 76,
			153, 168, 138, 197, 92, 209, 183, 123, 29, 210,
			45, 211, 61, 198, 108, 169, 154, 212, 184, 139,
			77, 199, 124, 213, 93, 225, 30, 226, 170, 185,
			155, 227, 214, 109, 62, 46, 78, 200, 140, 228,
			215, 125, 171, 229, 186, 94, 201, 156, 110, 230,
			13, 224, 14, 216, 141, 187, 202, 255, 172, 231,
			126, 217, 157, 232, 142, 203, 188, 218, 173, 233,
			158, 204, 219, 189, 234, 174, 220, 205, 235, 190,
			221, 236, 206, 237, 222, 238, 15, 240, 31, 241,
			242, 47, 243, 63, 244, 79, 245, 95, 246, 111,
			247, 127, 143, 248, 249, 159, 175, 250, 251, 191,
			252, 207, 253, 223, 254, 239
		}).getVLC();
		bigValVlc = new VLC[32]
		{
			null, tab1, tab2, tab3, null, tab5, tab6, tab7, tab8, tab9,
			tab10, tab11, tab12, tab13, null, tab15, tab16, tab16, tab16, tab16,
			tab16, tab16, tab16, tab16, tab24, tab24, tab24, tab24, tab24, tab24,
			tab24, tab24
		};
		bigValMaxval = new int[32]
		{
			0, 2, 3, 3, 0, 4, 4, 6, 6, 6,
			8, 8, 8, 16, 0, 16, 16, 16, 16, 16,
			16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
			16, 16
		};
		bigValEscBits = new int[32]
		{
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
			6, 8, 10, 13, 4, 5, 6, 7, 8, 9,
			11, 13
		};
		cnt1A = VLCBuilder.createVLCBuilder(new int[16]
		{
			1, 7, 6, 5, 4, 7, 6, 5, 4, 3,
			5, 4, 3, 2, 1, 0
		}, new int[16]
		{
			1, 4, 4, 4, 4, 5, 5, 5, 5, 5,
			6, 6, 6, 6, 6, 6
		}, new int[16]
		{
			0, 8, 4, 1, 2, 12, 10, 3, 6, 9,
			5, 7, 14, 13, 15, 11
		}).getVLC();
		cnt1B = VLCBuilder.createVLCBuilder(new int[16]
		{
			15, 14, 13, 12, 11, 10, 9, 8, 7, 6,
			5, 4, 3, 2, 1, 0
		}, new int[16]
		{
			4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
			4, 4, 4, 4, 4, 4
		}, new int[16]
		{
			0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
			10, 11, 12, 13, 14, 15
		}).getVLC();
	}
}
